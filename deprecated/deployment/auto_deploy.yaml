# Automation to pull from GitHub and deploy when update is needed
alias: Auto Deploy Glitch Cube - Pull from GitHub
description: Automatically pull from GitHub and deploy when new commits are detected
trigger:
  # Trigger from sensor change
  - platform: state
    entity_id: sensor.glitchcube_deployment_status
    to: "update-available"
    for:
      minutes: 1  # Wait 1 minute to avoid rapid triggers
    id: sensor_trigger
    
  # Trigger from GitHub action setting input_boolean
  - platform: state
    entity_id: input_boolean.glitchcube_update_pending
    to: "on"
    id: github_trigger
condition:
  # Only deploy if not already deploying
  - condition: state
    entity_id: input_boolean.glitchcube_deploying
    state: "off"
  # Optional: Only deploy during certain hours
  # - condition: time
  #   after: "08:00:00"
  #   before: "22:00:00"
action:
  # Set deploying flag
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.glitchcube_deploying
      
  # Send notification
  - service: persistent_notification.create
    data:
      title: "Glitch Cube Deployment Started"
      message: "Deploying new version from GitHub..."
      
  # Run pull-from-github script
  - service: shell_command.deploy_glitchcube
  
  # Wait for deployment to complete (adjust time as needed)
  - delay:
      minutes: 5
      
  # Clear deploying flag
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.glitchcube_deploying
      
  # Clear update pending flag
  - service: input_boolean.turn_off
    target:
      entity_id: input_boolean.glitchcube_update_pending
      
  # Update deployment info
  - service: input_text.set_value
    target:
      entity_id: input_text.last_deployment_time
    data:
      value: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      
  # Final notification
  - service: persistent_notification.create
    data:
      title: "Glitch Cube Deployment Complete"
      message: "Successfully deployed commit {{ states('sensor.glitchcube_current_commit')[:7] }}"
<!DOCTYPE html>
<html>
<head>
  <title>Glitch Cube - Conversation Studio</title>
  <link rel="stylesheet" href="/css/admin_enhanced.css">
  <style>
    body {
      font-family: monospace;
      background: #000;
      color: #0f0;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
    
    .studio-container {
      display: flex;
      height: 100vh;
      flex-direction: column;
    }
    
    .studio-header {
      background: #001100;
      border-bottom: 2px solid #0f0;
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .studio-main {
      flex: 1;
      display: flex;
      overflow: hidden;
    }
    
    .conversation-workspace {
      flex: 1;
      display: flex;
      gap: 20px;
      padding: 20px;
      overflow-x: auto;
    }
    
    .test-panel {
      min-width: 400px;
      max-width: 600px;
      display: flex;
      flex-direction: column;
      background: #001100;
      border: 2px solid #0f0;
      border-radius: 10px;
      overflow: hidden;
    }
    
    .panel-header {
      padding: 15px;
      background: #000500;
      border-bottom: 1px solid #0f0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .panel-title {
      font-weight: bold;
      color: #00ff00;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .panel-controls {
      display: flex;
      gap: 10px;
    }
    
    .mini-button {
      padding: 5px 10px;
      background: #003300;
      border: 1px solid #0f0;
      color: #0f0;
      cursor: pointer;
      border-radius: 3px;
      font-size: 12px;
    }
    
    .mini-button:hover {
      background: #005500;
      box-shadow: 0 0 10px #0f0;
    }
    
    .conversation-area {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
      background: #000500;
    }
    
    .input-area {
      padding: 15px;
      background: #001100;
      border-top: 1px solid #0f0;
    }
    
    .input-wrapper {
      display: flex;
      gap: 10px;
    }
    
    .message-input {
      flex: 1;
      background: #000;
      color: #0f0;
      border: 1px solid #0f0;
      padding: 10px;
      font-family: monospace;
      border-radius: 5px;
    }
    
    .send-button {
      padding: 10px 20px;
      background: #003300;
      color: #0f0;
      border: 1px solid #0f0;
      cursor: pointer;
      border-radius: 5px;
      font-weight: bold;
    }
    
    .send-button:hover {
      background: #005500;
      box-shadow: 0 0 15px #0f0;
    }
    
    .scenario-tabs {
      display: flex;
      gap: 10px;
      padding: 10px 20px;
      background: #000500;
      border-bottom: 1px solid #0f0;
    }
    
    .scenario-tab {
      padding: 8px 15px;
      background: #001100;
      border: 1px solid #0f0;
      color: #0f0;
      cursor: pointer;
      border-radius: 5px;
      transition: all 0.3s;
    }
    
    .scenario-tab.active {
      background: #003300;
      box-shadow: 0 0 10px #0f0;
    }
    
    .add-panel-button {
      position: fixed;
      bottom: 30px;
      right: 30px;
      width: 60px;
      height: 60px;
      background: #003300;
      border: 2px solid #0f0;
      border-radius: 50%;
      color: #0f0;
      font-size: 30px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 5px 20px rgba(0, 255, 0, 0.3);
      transition: all 0.3s;
    }
    
    .add-panel-button:hover {
      transform: scale(1.1);
      box-shadow: 0 10px 30px rgba(0, 255, 0, 0.5);
    }
    
    .comparison-mode {
      background: linear-gradient(135deg, #001100, #002200);
      border-color: #00ff00;
    }
    
    .status-row {
      display: flex;
      gap: 15px;
      align-items: center;
      font-size: 12px;
      color: #666;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="studio-container">
    <!-- Header -->
    <div class="studio-header">
      <h1 style="margin: 0; color: #00ff00; text-shadow: 0 0 20px #0f0;">
        CONVERSATION STUDIO
      </h1>
      <div style="display: flex; gap: 15px; align-items: center;">
        <span class="status-indicator online" data-service="home_assistant"></span> HA
        <span class="status-indicator online" data-service="openrouter"></span> AI
        <span class="status-indicator online" data-service="redis"></span> Redis
        <span style="margin-left: 20px;">
          <a href="/admin/dashboard" style="color: #00ffff;">Dashboard</a> |
          <a href="/admin/advanced" style="color: #00ffff;">Advanced</a> |
          <a href="/admin" style="color: #00ffff;">Main</a>
        </span>
      </div>
    </div>
    
    <!-- Persona Selector -->
    <div class="persona-selector">
      <!-- Populated by JavaScript -->
    </div>
    
    <!-- Scenario Tabs -->
    <div class="scenario-tabs">
      <div class="scenario-tab active" data-scenario="testing">Testing</div>
      <div class="scenario-tab" data-scenario="comparison">A/B Comparison</div>
      <div class="scenario-tab" data-scenario="debugging">Debug Mode</div>
      <div class="scenario-tab" data-scenario="templates">Templates</div>
    </div>
    
    <!-- Tool Palette -->
    <div class="tool-palette" style="margin: 0 20px;">
      <!-- Populated by JavaScript -->
    </div>
    
    <!-- Main Workspace -->
    <div class="studio-main">
      <!-- Conversation Panels -->
      <div class="conversation-workspace" id="workspace">
        <!-- Panel A -->
        <div class="test-panel" data-panel="A">
          <div class="panel-header">
            <div class="panel-title">
              <span>PANEL A</span>
              <span class="status-indicator online"></span>
              <span style="font-size: 12px; color: #666;" id="panel-a-persona">neutral</span>
            </div>
            <div class="panel-controls">
              <button class="mini-button" onclick="studio.clearPanel('A')">Clear</button>
              <button class="mini-button" onclick="studio.clonePanel('A')">Clone</button>
              <button class="mini-button" onclick="studio.exportPanel('A')">Export</button>
            </div>
          </div>
          <div class="conversation-area" id="conversation-a">
            <div style="color: #666; text-align: center; padding: 50px;">Ready for testing...</div>
          </div>
          <div class="input-area">
            <div class="input-wrapper">
              <input type="text" class="message-input" id="input-a" placeholder="Type your message...">
              <button class="send-button" onclick="studio.sendMessage('A')">Send</button>
            </div>
            <div class="status-row">
              <span>Session: <span id="session-a">--</span></span>
              <span>Cost: $<span id="cost-a">0.000000</span></span>
              <span>Tokens: <span id="tokens-a">0/0</span></span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Analysis Panel -->
      <div class="analysis-panel">
        <div class="analysis-section">
          <h3>Response Metrics</h3>
          <div class="metric-row">
            <span class="metric-label">Response Time</span>
            <span class="metric-value" id="response-time">--</span>
          </div>
          <div class="metric-row">
            <span class="metric-label">Model Used</span>
            <span class="metric-value" id="model-used">--</span>
          </div>
          <div class="metric-row">
            <span class="metric-label">Total Cost</span>
            <span class="metric-value" id="total-cost">$0.00</span>
          </div>
          <div class="metric-bar">
            <div class="metric-fill" id="cost-bar" style="width: 0%;"></div>
          </div>
        </div>
        
        <div class="analysis-section">
          <h3>Tool Usage</h3>
          <div id="tool-usage">
            <div style="color: #666;">No tools called yet</div>
          </div>
        </div>
        
        <div class="analysis-section">
          <h3>Memory Injections</h3>
          <div id="memory-injections">
            <div style="color: #666;">No memories used</div>
          </div>
        </div>
        
        <div class="analysis-section">
          <h3>Activity Feed</h3>
          <div class="activity-feed" id="activity-feed">
            <!-- Activity items added here -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Floating Action Button -->
    <button class="add-panel-button" onclick="studio.addPanel()" title="Add New Panel">+</button>
    
    <!-- Keyboard Shortcuts Modal -->
    <div id="shortcuts-modal" class="shortcuts-modal">
      <h3 style="color: #00ff00; margin-bottom: 20px;">Keyboard Shortcuts</h3>
      <div class="shortcut-item">
        <span>Send Message</span>
        <span class="shortcut-key">Cmd + Enter</span>
      </div>
      <div class="shortcut-item">
        <span>Clear Panel</span>
        <span class="shortcut-key">Cmd + K</span>
      </div>
      <div class="shortcut-item">
        <span>New Panel</span>
        <span class="shortcut-key">Cmd + N</span>
      </div>
      <div class="shortcut-item">
        <span>Switch Persona</span>
        <span class="shortcut-key">Cmd + 1-7</span>
      </div>
      <div class="shortcut-item">
        <span>Show Shortcuts</span>
        <span class="shortcut-key">Cmd + /</span>
      </div>
      <div style="margin-top: 20px; text-align: center;">
        <button class="mini-button" onclick="document.getElementById('shortcuts-modal').classList.remove('show')">Close</button>
      </div>
    </div>
  </div>
  
  <script src="/js/admin_enhanced.js"></script>
  <script>
    // Conversation Studio specific code
    class ConversationStudio extends AdminEnhanced {
      constructor() {
        super();
        this.panels = new Map();
        this.activeScenario = 'testing';
        this.comparisonMode = false;
        this.initStudio();
      }
      
      initStudio() {
        this.setupScenarioTabs();
        this.initializePanel('A');
        this.setupKeyboardShortcuts();
      }
      
      setupScenarioTabs() {
        document.querySelectorAll('.scenario-tab').forEach(tab => {
          tab.addEventListener('click', () => {
            document.querySelectorAll('.scenario-tab').forEach(t => t.classList.remove('active'));
            tab.classList.add('active');
            this.activeScenario = tab.dataset.scenario;
            this.updateScenario();
          });
        });
      }
      
      updateScenario() {
        switch(this.activeScenario) {
          case 'comparison':
            this.enableComparisonMode();
            break;
          case 'debugging':
            this.enableDebugMode();
            break;
          case 'templates':
            this.showTemplates();
            break;
          default:
            this.normalMode();
        }
      }
      
      initializePanel(panelId) {
        this.panels.set(panelId, {
          sessionId: this.generateSessionId(),
          persona: this.currentPersona,
          tools: new Set(this.enabledTools),
          history: [],
          cost: 0,
          tokens: { prompt: 0, completion: 0 }
        });
        
        document.getElementById(`session-${panelId.toLowerCase()}`).textContent = 
          this.panels.get(panelId).sessionId.substring(0, 12) + '...';
      }
      
      async sendMessage(panelId) {
        const input = document.getElementById(`input-${panelId.toLowerCase()}`);
        const message = input.value.trim();
        if (!message) return;
        
        const panel = this.panels.get(panelId);
        if (!panel) {
          this.initializePanel(panelId);
        }
        
        this.displayPanelMessage(panelId, 'user', message);
        input.value = '';
        
        try {
          const response = await fetch('/api/v1/conversation', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              message,
              context: {
                session_id: panel.sessionId,
                source: 'conversation_studio',
                tools: Array.from(panel.tools || this.enabledTools)
              },
              persona: panel.persona || this.currentPersona
            })
          });
          
          const data = await response.json();
          this.displayPanelMessage(panelId, 'assistant', data.response || 'No response', data);
          this.updatePanelStats(panelId, data);
          this.updateAnalysis(data);
        } catch (error) {
          this.displayPanelMessage(panelId, 'system', `Error: ${error.message}`);
        }
      }
      
      displayPanelMessage(panelId, role, content, metadata = {}) {
        const container = document.getElementById(`conversation-${panelId.toLowerCase()}`);
        if (!container) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message-bubble ${role}`;
        messageDiv.innerHTML = `
          <div class="message-meta">
            <span>${role.toUpperCase()}</span>
            <span>${new Date().toLocaleTimeString()}</span>
          </div>
          <div class="message-content">${this.escapeHtml(content)}</div>
        `;
        
        container.appendChild(messageDiv);
        container.scrollTop = container.scrollHeight;
        
        const panel = this.panels.get(panelId);
        if (panel) {
          panel.history.push({ role, content, timestamp: new Date(), metadata });
        }
      }
      
      updatePanelStats(panelId, data) {
        const panel = this.panels.get(panelId);
        if (!panel) return;
        
        if (data.cost) {
          panel.cost += data.cost;
          document.getElementById(`cost-${panelId.toLowerCase()}`).textContent = panel.cost.toFixed(6);
        }
        
        if (data.tokens) {
          panel.tokens.prompt += data.tokens.prompt_tokens || 0;
          panel.tokens.completion += data.tokens.completion_tokens || 0;
          document.getElementById(`tokens-${panelId.toLowerCase()}`).textContent = 
            `${panel.tokens.prompt}/${panel.tokens.completion}`;
        }
      }
      
      updateAnalysis(data) {
        if (data.response_time) {
          document.getElementById('response-time').textContent = `${data.response_time}ms`;
        }
        if (data.model) {
          document.getElementById('model-used').textContent = data.model;
        }
        if (data.cost) {
          const totalCost = Array.from(this.panels.values()).reduce((sum, p) => sum + p.cost, 0);
          document.getElementById('total-cost').textContent = `$${totalCost.toFixed(6)}`;
        }
        
        this.log(`Response received: ${data.model || 'unknown'} - $${(data.cost || 0).toFixed(6)}`, 'success');
      }
      
      clearPanel(panelId) {
        const container = document.getElementById(`conversation-${panelId.toLowerCase()}`);
        if (container) {
          container.innerHTML = '<div style="color: #666; text-align: center; padding: 50px;">Ready for testing...</div>';
        }
        
        const panel = this.panels.get(panelId);
        if (panel) {
          panel.history = [];
        }
        
        this.log(`Panel ${panelId} cleared`, 'info');
      }
      
      clonePanel(panelId) {
        const panel = this.panels.get(panelId);
        if (!panel) return;
        
        const newPanelId = String.fromCharCode(65 + this.panels.size);
        this.addPanel(newPanelId);
        
        const newPanel = this.panels.get(newPanelId);
        if (newPanel) {
          newPanel.persona = panel.persona;
          newPanel.tools = new Set(panel.tools);
        }
        
        this.log(`Panel ${panelId} cloned to ${newPanelId}`, 'success');
      }
      
      exportPanel(panelId) {
        const panel = this.panels.get(panelId);
        if (!panel) return;
        
        const data = {
          panel_id: panelId,
          session_id: panel.sessionId,
          persona: panel.persona,
          tools: Array.from(panel.tools),
          history: panel.history,
          cost: panel.cost,
          tokens: panel.tokens,
          exported_at: new Date().toISOString()
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `panel-${panelId}-${panel.sessionId}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        this.log(`Panel ${panelId} exported`, 'success');
      }
      
      addPanel(customId = null) {
        const workspace = document.getElementById('workspace');
        const panelId = customId || String.fromCharCode(65 + this.panels.size);
        
        if (this.panels.size >= 4) {
          this.log('Maximum 4 panels supported', 'warning');
          return;
        }
        
        const panelHtml = `
          <div class="test-panel" data-panel="${panelId}">
            <div class="panel-header">
              <div class="panel-title">
                <span>PANEL ${panelId}</span>
                <span class="status-indicator online"></span>
                <span style="font-size: 12px; color: #666;" id="panel-${panelId.toLowerCase()}-persona">${this.currentPersona}</span>
              </div>
              <div class="panel-controls">
                <button class="mini-button" onclick="studio.clearPanel('${panelId}')">Clear</button>
                <button class="mini-button" onclick="studio.clonePanel('${panelId}')">Clone</button>
                <button class="mini-button" onclick="studio.exportPanel('${panelId}')">Export</button>
                <button class="mini-button" onclick="studio.removePanel('${panelId}')">X</button>
              </div>
            </div>
            <div class="conversation-area" id="conversation-${panelId.toLowerCase()}">
              <div style="color: #666; text-align: center; padding: 50px;">Ready for testing...</div>
            </div>
            <div class="input-area">
              <div class="input-wrapper">
                <input type="text" class="message-input" id="input-${panelId.toLowerCase()}" placeholder="Type your message...">
                <button class="send-button" onclick="studio.sendMessage('${panelId}')">Send</button>
              </div>
              <div class="status-row">
                <span>Session: <span id="session-${panelId.toLowerCase()}">--</span></span>
                <span>Cost: $<span id="cost-${panelId.toLowerCase()}">0.000000</span></span>
                <span>Tokens: <span id="tokens-${panelId.toLowerCase()}">0/0</span></span>
              </div>
            </div>
          </div>
        `;
        
        workspace.insertAdjacentHTML('beforeend', panelHtml);
        this.initializePanel(panelId);
        
        // Add enter key handler
        const input = document.getElementById(`input-${panelId.toLowerCase()}`);
        input.addEventListener('keypress', (e) => {
          if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {
            this.sendMessage(panelId);
          }
        });
        
        this.log(`Added panel ${panelId}`, 'success');
      }
      
      removePanel(panelId) {
        if (this.panels.size <= 1) {
          this.log('Cannot remove last panel', 'warning');
          return;
        }
        
        const panel = document.querySelector(`.test-panel[data-panel="${panelId}"]`);
        if (panel) {
          panel.remove();
        }
        
        this.panels.delete(panelId);
        this.log(`Removed panel ${panelId}`, 'info');
      }
      
      enableComparisonMode() {
        this.comparisonMode = true;
        if (this.panels.size < 2) {
          this.addPanel();
        }
        
        document.querySelectorAll('.test-panel').forEach(panel => {
          panel.classList.add('comparison-mode');
        });
        
        this.log('Comparison mode enabled', 'info');
      }
      
      enableDebugMode() {
        this.log('Debug mode enabled - verbose logging active', 'info');
      }
      
      showTemplates() {
        // This would show saved conversation templates
        this.log('Templates feature coming soon', 'info');
      }
      
      normalMode() {
        this.comparisonMode = false;
        document.querySelectorAll('.test-panel').forEach(panel => {
          panel.classList.remove('comparison-mode');
        });
      }
      
      generateSessionId() {
        return `studio-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      }
    }
    
    // Initialize studio when ready
    document.addEventListener('DOMContentLoaded', () => {
      window.studio = new ConversationStudio();
    });
  </script>
</body>
</html>
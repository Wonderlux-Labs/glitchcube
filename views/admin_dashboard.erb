<!DOCTYPE html>
<html>
<head>
  <title>Glitch Cube - Admin Dashboard</title>
  <link rel="stylesheet" href="/css/admin_enhanced.css">
  <style>
    body {
      font-family: monospace;
      background: #000;
      color: #0f0;
      margin: 0;
      padding: 20px;
    }
    
    .dashboard-header {
      text-align: center;
      margin-bottom: 40px;
      padding: 30px;
      background: linear-gradient(135deg, #001100, #002200);
      border: 2px solid #0f0;
      border-radius: 10px;
    }
    
    .dashboard-header h1 {
      margin: 0;
      font-size: 48px;
      color: #00ff00;
      text-shadow: 0 0 30px #0f0;
      animation: glow 2s ease-in-out infinite;
    }
    
    @keyframes glow {
      0%, 100% { text-shadow: 0 0 30px #0f0; }
      50% { text-shadow: 0 0 50px #0f0, 0 0 70px #0f0; }
    }
    
    .quick-stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
    
    .stat-card {
      background: #001100;
      border: 2px solid #0f0;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      transition: all 0.3s;
      cursor: pointer;
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(0, 255, 0, 0.3);
    }
    
    .stat-value {
      font-size: 36px;
      font-weight: bold;
      color: #00ffff;
      margin: 10px 0;
      text-shadow: 0 0 15px currentColor;
    }
    
    .stat-label {
      color: #666;
      text-transform: uppercase;
      font-size: 12px;
      letter-spacing: 1px;
    }
    
    .navigation-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 25px;
      margin-bottom: 40px;
    }
    
    .nav-card {
      background: linear-gradient(135deg, #001100, #003300);
      border: 2px solid #0f0;
      border-radius: 10px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s;
      cursor: pointer;
      text-decoration: none;
      color: #0f0;
      display: block;
      position: relative;
      overflow: hidden;
    }
    
    .nav-card::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, #00ff00, #00ffff, #ff00ff, #00ff00);
      border-radius: 10px;
      opacity: 0;
      z-index: -1;
      transition: opacity 0.3s;
    }
    
    .nav-card:hover::before {
      opacity: 1;
      animation: rotate 3s linear infinite;
    }
    
    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .nav-card:hover {
      transform: translateY(-10px) scale(1.05);
      box-shadow: 0 15px 40px rgba(0, 255, 0, 0.4);
      background: linear-gradient(135deg, #002200, #004400);
    }
    
    .nav-icon {
      font-size: 48px;
      margin-bottom: 15px;
    }
    
    .nav-title {
      font-size: 20px;
      font-weight: bold;
      margin-bottom: 10px;
      color: #00ff00;
    }
    
    .nav-description {
      font-size: 12px;
      color: #999;
      line-height: 1.4;
    }
    
    .system-status {
      background: #001100;
      border: 2px solid #0f0;
      border-radius: 10px;
      padding: 25px;
      margin-bottom: 40px;
    }
    
    .status-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .status-item {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 10px;
      background: #000500;
      border-radius: 5px;
    }
    
    .recent-activity {
      background: #001100;
      border: 2px solid #0f0;
      border-radius: 10px;
      padding: 25px;
    }
    
    .activity-list {
      max-height: 300px;
      overflow-y: auto;
      margin-top: 15px;
    }
    
    .activity-entry {
      padding: 10px;
      margin: 5px 0;
      background: #000500;
      border-left: 3px solid #0f0;
      border-radius: 3px;
      font-size: 12px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .activity-entry.error {
      border-left-color: #ff0000;
      background: rgba(255, 0, 0, 0.1);
    }
    
    .activity-entry.success {
      border-left-color: #00ff00;
    }
    
    .activity-entry.warning {
      border-left-color: #ffff00;
      background: rgba(255, 255, 0, 0.1);
    }
    
    .time-ago {
      color: #666;
      font-size: 10px;
    }
    
    .quick-actions {
      position: fixed;
      bottom: 30px;
      right: 30px;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .quick-action-btn {
      width: 50px;
      height: 50px;
      background: #003300;
      border: 2px solid #0f0;
      border-radius: 50%;
      color: #0f0;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      transition: all 0.3s;
    }
    
    .quick-action-btn:hover {
      transform: scale(1.2);
      box-shadow: 0 0 20px #0f0;
    }
  </style>
</head>
<body>
  <div class="dashboard-header">
    <h1>GLITCH CUBE CONTROL CENTER</h1>
    <p style="color: #00ffff; margin: 5px 0;">System Administrator Dashboard</p>
    <p style="color: #666; font-size: 12px;">All systems operational</p>
  </div>
  
  <!-- Quick Stats -->
  <div class="quick-stats">
    <div class="stat-card" onclick="location.href='/admin/advanced#sessions'">
      <div class="stat-label">Active Sessions</div>
      <div class="stat-value" id="active-sessions">--</div>
      <span class="status-indicator online"></span>
    </div>
    
    <div class="stat-card" onclick="location.href='/admin/memories'">
      <div class="stat-label">Total Memories</div>
      <div class="stat-value" id="total-memories">--</div>
      <span class="status-indicator online"></span>
    </div>
    
    <div class="stat-card" onclick="location.href='/admin/errors'">
      <div class="stat-label">Recent Errors</div>
      <div class="stat-value" id="recent-errors">--</div>
      <span class="status-indicator warning" id="error-indicator"></span>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">Conversations Today</div>
      <div class="stat-value" id="conversations-today">--</div>
      <span class="status-indicator online"></span>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">Uptime</div>
      <div class="stat-value" id="uptime">--</div>
      <span class="status-indicator online"></span>
    </div>
    
    <div class="stat-card">
      <div class="stat-label">Total Cost</div>
      <div class="stat-value" id="total-cost">$--</div>
      <span class="status-indicator online"></span>
    </div>
  </div>
  
  <!-- Navigation Grid -->
  <div class="navigation-grid">
    <a href="/admin/conversation_studio" class="nav-card">
      <div class="nav-icon">üí¨</div>
      <div class="nav-title">Conversation Studio</div>
      <div class="nav-description">Advanced testing interface with side-by-side comparisons</div>
    </a>
    
    <a href="/admin/advanced" class="nav-card">
      <div class="nav-icon">üîß</div>
      <div class="nav-title">Advanced Tools</div>
      <div class="nav-description">Complete testing suite with all features</div>
    </a>
    
    <a href="/admin/memories" class="nav-card">
      <div class="nav-icon">üß†</div>
      <div class="nav-title">Memory Explorer</div>
      <div class="nav-description">Browse and manage extracted memories</div>
    </a>
    
    <a href="/admin/errors" class="nav-card">
      <div class="nav-icon">üêõ</div>
      <div class="nav-title">Error Tracking</div>
      <div class="nav-description">View errors and self-healing proposals</div>
    </a>
    
    <a href="/admin/conversation_flow" class="nav-card">
      <div class="nav-icon">üåä</div>
      <div class="nav-title">Flow Visualization</div>
      <div class="nav-description">Visual conversation flow debugger</div>
    </a>
    
    <a href="/admin" class="nav-card">
      <div class="nav-icon">‚öôÔ∏è</div>
      <div class="nav-title">Classic Admin</div>
      <div class="nav-description">Original admin interface</div>
    </a>
  </div>
  
  <!-- System Status -->
  <div class="system-status">
    <h2 style="color: #00ff00; margin-top: 0;">System Status</h2>
    <div class="status-grid">
      <div class="status-item">
        <span class="status-indicator online" data-service="home_assistant"></span>
        <span>Home Assistant</span>
      </div>
      <div class="status-item">
        <span class="status-indicator online" data-service="openrouter"></span>
        <span>OpenRouter AI</span>
      </div>
      <div class="status-item">
        <span class="status-indicator online" data-service="redis"></span>
        <span>Redis Cache</span>
      </div>
      <div class="status-item">
        <span class="status-indicator online" data-service="database"></span>
        <span>PostgreSQL</span>
      </div>
      <div class="status-item">
        <span class="status-indicator online" data-service="sidekiq"></span>
        <span>Background Jobs</span>
      </div>
      <div class="status-item">
        <span class="status-indicator online" data-service="tts"></span>
        <span>Text-to-Speech</span>
      </div>
    </div>
  </div>
  
  <!-- Recent Activity -->
  <div class="recent-activity">
    <h2 style="color: #00ff00; margin-top: 0;">Recent Activity</h2>
    <div class="activity-list" id="activity-list">
      <div class="activity-entry">
        <span>Loading activity...</span>
        <span class="time-ago">--</span>
      </div>
    </div>
  </div>
  
  <!-- Quick Actions -->
  <div class="quick-actions">
    <button class="quick-action-btn" onclick="clearCache()" title="Clear Cache">üóëÔ∏è</button>
    <button class="quick-action-btn" onclick="extractMemories()" title="Extract Memories">üß†</button>
    <button class="quick-action-btn" onclick="refreshDashboard()" title="Refresh">üîÑ</button>
  </div>
  
  <script>
    // Dashboard functionality
    let refreshInterval;
    
    async function loadDashboardData() {
      try {
        // Load system status
        const statusResponse = await fetch('/admin/status');
        const status = await statusResponse.json();
        updateServiceIndicators(status);
        
        // Load memories count
        const memoriesResponse = await fetch('/admin/memories?type=recent&limit=1');
        const memories = await memoriesResponse.json();
        // This would need an endpoint to get total count
        document.getElementById('total-memories').textContent = memories.count || '--';
        
        // Load conversations count (would need new endpoint)
        const conversationsToday = await getConversationsToday();
        document.getElementById('conversations-today').textContent = conversationsToday;
        
        // Calculate uptime (would need server start time)
        updateUptime();
        
        // Load recent activity
        loadRecentActivity();
        
        // Update stats
        updateStats();
        
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      }
    }
    
    function updateServiceIndicators(status) {
      Object.entries(status).forEach(([service, isOnline]) => {
        const indicator = document.querySelector(`.status-indicator[data-service="${service}"]`);
        if (indicator) {
          indicator.className = `status-indicator ${isOnline ? 'online' : 'offline'}`;
        }
      });
    }
    
    async function getConversationsToday() {
      // This would need a new endpoint to get today's conversation count
      return Math.floor(Math.random() * 50) + 10; // Placeholder
    }
    
    function updateUptime() {
      // This would calculate from server start time
      const hours = Math.floor(Math.random() * 24) + 1;
      document.getElementById('uptime').textContent = `${hours}h`;
    }
    
    async function loadRecentActivity() {
      const activities = [
        { message: 'New conversation started', type: 'success', time: '2 min ago' },
        { message: 'Memory extracted successfully', type: 'success', time: '5 min ago' },
        { message: 'Tool call: weather_check', type: 'info', time: '7 min ago' },
        { message: 'Session ended', type: 'warning', time: '10 min ago' },
        { message: 'Persona switched to BUDDY', type: 'info', time: '15 min ago' }
      ];
      
      const activityList = document.getElementById('activity-list');
      activityList.innerHTML = activities.map(activity => `
        <div class="activity-entry ${activity.type}">
          <span>${activity.message}</span>
          <span class="time-ago">${activity.time}</span>
        </div>
      `).join('');
    }
    
    async function updateStats() {
      // Update various stats
      document.getElementById('active-sessions').textContent = 
        Math.floor(Math.random() * 5) + 1;
      
      document.getElementById('recent-errors').textContent = 
        Math.floor(Math.random() * 3);
      
      const errorCount = parseInt(document.getElementById('recent-errors').textContent);
      const errorIndicator = document.getElementById('error-indicator');
      if (errorCount > 0) {
        errorIndicator.className = 'status-indicator warning';
      } else {
        errorIndicator.className = 'status-indicator online';
      }
      
      document.getElementById('total-cost').textContent = 
        `$${(Math.random() * 10).toFixed(4)}`;
    }
    
    function clearCache() {
      if (confirm('Clear all caches?')) {
        console.log('Clearing cache...');
        alert('Cache cleared successfully!');
      }
    }
    
    async function extractMemories() {
      console.log('Extracting memories...');
      try {
        const response = await fetch('/admin/extract_memories', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({})
        });
        const data = await response.json();
        if (data.success) {
          alert(data.message || 'Memories extracted successfully!');
          loadDashboardData();
        }
      } catch (error) {
        alert('Failed to extract memories: ' + error.message);
      }
    }
    
    function refreshDashboard() {
      loadDashboardData();
      const btn = event.target;
      btn.style.animation = 'spin 1s';
      setTimeout(() => {
        btn.style.animation = '';
      }, 1000);
    }
    
    // Auto-refresh every 30 seconds
    function startAutoRefresh() {
      refreshInterval = setInterval(loadDashboardData, 30000);
    }
    
    function stopAutoRefresh() {
      if (refreshInterval) {
        clearInterval(refreshInterval);
      }
    }
    
    // Initialize on load
    document.addEventListener('DOMContentLoaded', () => {
      loadDashboardData();
      startAutoRefresh();
    });
    
    // Stop refresh when page is hidden
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopAutoRefresh();
      } else {
        loadDashboardData();
        startAutoRefresh();
      }
    });
  </script>
</body>
</html>
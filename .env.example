# Glitch Cube Environment Configuration
# Copy this file to .env and update with your values

# =============================
# REQUIRED: AI Configuration
# =============================
# OpenRouter API key (primary AI provider)
OPENROUTER_API_KEY=your-openrouter-api-key-here

# Default AI model (see config/model_presets.rb for options)
DEFAULT_AI_MODEL=google/gemini-2.5-flash

# AI conversation parameters
AI_TEMPERATURE=0.8
AI_MAX_TOKENS=200
MAX_SESSION_MESSAGES=10

# =============================
# REQUIRED: Home Assistant
# =============================
# Home Assistant URL
HA_URL=http://localhost:8123

# Home Assistant long-lived access token
HA_TOKEN=your-home-assistant-token-here

# =============================
# OPTIONAL: MQTT Configuration
# =============================
# MQTT broker credentials for Govee2MQTT and AWTRIX
MQTT_USERNAME=glitchcube
MQTT_PASSWORD=glitchcube123

# =============================
# OPTIONAL: Govee Integration
# =============================
# Govee API key (get from https://developer.govee.com/reference/apply-you-govee-api-key)
GOVEE_API_KEY=your-govee-api-key-here

# Govee account credentials (for IoT API access)
GOVEE_EMAIL=your-govee-email@example.com
GOVEE_PASSWORD=your-govee-password

# =============================
# REQUIRED: Application Settings
# =============================
# Session secret (generate with: ruby -r securerandom -e "puts SecureRandom.hex(64)")
SESSION_SECRET=generate-a-64-character-hex-string-here

# Environment (development/production)
RACK_ENV=production

# Device identifier for this installation
DEVICE_ID=glitch_cube_001

# Installation location
INSTALLATION_LOCATION=Black Rock City

# =============================
# OPTIONAL: Additional AI Providers
# =============================
# Only needed if using these providers directly
OPENAI_API_KEY=
ANTHROPIC_API_KEY=

# AI Gateway for observability (optional)
HELICONE_API_KEY=
AI_GATEWAY_URL=http://helicone-gateway:8080/openrouter/v1/chat/completions

# =============================
# OPTIONAL: External Services
# =============================
# Uptime Kuma push monitoring (optional)
UPTIME_KUMA_PUSH_URL=

# =============================
# Docker Configuration
# =============================
# Data paths (defaults work for most cases)
HA_CONFIG_PATH=./data/production/homeassistant
GLITCHCUBE_DATA_PATH=./data/production/glitchcube

# Database URL (PostgreSQL)
DATABASE_URL=postgresql://glitchcube:glitchcube@localhost:5432/glitchcube_development
# Example PostgreSQL: DATABASE_URL=postgresql://user:password@host:5432/database
# For Docker: DATABASE_URL=postgresql://glitchcube:glitchcube@postgres:5432/glitchcube

# =============================
# MariaDB Configuration
# =============================
# MariaDB is always enabled for better performance
# Passwords are set in docker-compose.yml and init.sql
# No need to override unless changing from defaults

# =============================
# GitHub Deployment Webhook
# =============================
# GitHub webhook secret for secure deployment automation
GITHUB_WEBHOOK_SECRET=your-github-webhook-secret-here

# API key for manual deployment endpoint
DEPLOYMENT_API_KEY=your-deployment-api-key-here

# Internal deployment only accepts requests from Home Assistant IP
# No additional token needed - IP filtering provides security

# =============================
# System Settings
# =============================
# Timezone
TZ=America/Los_Angeles

# Application version
APP_VERSION=1.0.0

# Port (rarely needs changing)
PORT=4567

# Mock Home Assistant for development
MOCK_HOME_ASSISTANT=false

# Redis URL (set automatically by Docker)
REDIS_URL=redis://localhost:6379/0

# GPS Tracking (for Burning Man 2025)
GPS_DEVICE_TRACKER_ENTITY=device_tracker.glitch_cube

# Home Camp Location (shows as HOME on map)
HOME_CAMP_TIME=5:30
HOME_CAMP_STREET=F

# GPS Movement Simulation
# Defaults: true in development, false in production
# Set to 'false' to disable in development, or 'true' to enable in production
# SIMULATE_CUBE_MOVEMENT=false

# Deployment Configuration
MAC_MINI_DEPLOYMENT=true  # Set to false for Docker/Pi deployment

# =============================
# EXPERIMENTAL: Self-Healing Error Handler
# =============================
# WARNING: YOLO mode allows AUTONOMOUS CODE CHANGES AND DEPLOYMENT!
# Modes:
#   OFF     - Disabled completely (default, safest)
#   DRY_RUN - Analyze and log fixes but don't apply them (recommended for testing)
#   YOLO    - Actually modify code and deploy (⚠️ DANGEROUS - You Only Live Once!)
SELF_HEALING=OFF
SELF_HEALING_MIN_CONFIDENCE=0.85
SELF_HEALING_ERROR_THRESHOLD=3
# Bug fixes are stored in: log/proposed_fixes/YYYYMMDD_proposed_fixes.jsonl
{
  "test_service:Simulated error for testing": {
    "service": "test_service",
    "error": "Simulated error for testing",
    "count": 2,
    "first_occurrence": "2025-08-04T01:37:41-07:00",
    "last_occurrence": "2025-08-04T01:37:41-07:00"
  },
  "another_service:Different error type": {
    "service": "another_service",
    "error": "Different error type",
    "count": 1,
    "first_occurrence": "2025-08-04T01:37:41-07:00",
    "last_occurrence": "2025-08-04T01:37:41-07:00"
  },
  "tts:HA Error: Home Assistant temporarily unavailable": {
    "service": "tts",
    "error": "HA Error: Home Assistant temporarily unavailable",
    "count": 1,
    "first_occurrence": "2025-08-04T01:37:41-07:00",
    "last_occurrence": "2025-08-04T01:37:41-07:00"
  },
  "conversation:uninitialized constant ConversationModule::Desiru": {
    "service": "conversation",
    "error": "uninitialized constant ConversationModule::Desiru",
    "count": 1,
    "first_occurrence": "2025-08-04T01:39:19-07:00",
    "last_occurrence": "2025-08-04T01:39:19-07:00"
  },
  "conversation:undefined method 'complete' for nil": {
    "service": "conversation",
    "error": "undefined method 'complete' for nil",
    "count": 4,
    "first_occurrence": "2025-08-04T01:39:30-07:00",
    "last_occurrence": "2025-08-04T01:39:30-07:00"
  },
  "home_assistant:Connection failed: Failed to open TCP connection to localhost:8123 (Connection refused - connect(2) for \"localhost\" port 8123)": {
    "service": "home_assistant",
    "error": "Connection failed: Failed to open TCP connection to localhost:8123 (Connection refused - connect(2) for \"localhost\" port 8123)",
    "count": 22,
    "first_occurrence": "2025-08-04T01:39:30-07:00",
    "last_occurrence": "2025-08-04T04:08:14-07:00"
  },
  "tts:HA Error: Connection failed: Failed to open TCP connection to localhost:8123 (Connection refused - connect(2) for \"localhost\" port 8123)": {
    "service": "tts",
    "error": "HA Error: Connection failed: Failed to open TCP connection to localhost:8123 (Connection refused - connect(2) for \"localhost\" port 8123)",
    "count": 5,
    "first_occurrence": "2025-08-04T01:39:30-07:00",
    "last_occurrence": "2025-08-04T02:11:22-07:00"
  },
  "conversation:uninitialized constant Faraday::PaymentRequiredError": {
    "service": "conversation",
    "error": "uninitialized constant Faraday::PaymentRequiredError",
    "count": 5,
    "first_occurrence": "2025-08-04T02:11:07-07:00",
    "last_occurrence": "2025-08-04T02:11:33-07:00"
  },
  "tts:Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"I see colors in your thoughts!\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n": {
    "service": "tts",
    "error": "Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"I see colors in your thoughts!\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n",
    "count": 1,
    "first_occurrence": "2025-08-04T02:11:07-07:00",
    "last_occurrence": "2025-08-04T02:11:07-07:00"
  },
  "tts:Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Let's create something unexpected together!\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n": {
    "service": "tts",
    "error": "Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Let's create something unexpected together!\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n",
    "count": 2,
    "first_occurrence": "2025-08-04T02:11:07-07:00",
    "last_occurrence": "2025-08-04T02:11:20-07:00"
  },
  "tts:Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Your words dance with possibility...\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n": {
    "service": "tts",
    "error": "Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Your words dance with possibility...\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n",
    "count": 1,
    "first_occurrence": "2025-08-04T02:11:20-07:00",
    "last_occurrence": "2025-08-04T02:11:20-07:00"
  },
  "tts:Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Tell me more about your thoughts.\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n": {
    "service": "tts",
    "error": "Unexpected Error: \n\n================================================================================\nAn HTTP request has been made that VCR does not know how to handle:\n  POST http://localhost:8123/api/services/tts/speak\n  Body: {\"message\":\"Tell me more about your thoughts.\",\"entity_id\":\"media_player.glitch_cube_speaker\"}\n\nThere is currently no cassette in use. There are a few ways\nyou can configure VCR to handle this request:\n\n  * If you're surprised VCR is raising this error\n    and want insight about how VCR attempted to handle the request,\n    you can use the debug_logger configuration option to log more details [1].\n  * If you want VCR to record this request and play it back during future test\n    runs, you should wrap your test (or this portion of your test) in a\n    `VCR.use_cassette` block [2].\n  * If you only want VCR to handle requests made while a cassette is in use,\n    configure `allow_http_connections_when_no_cassette = true`. VCR will\n    ignore this request since it is made when there is no cassette [3].\n  * If you want VCR to ignore this request (and others like it), you can\n    set an `ignore_request` callback [4].\n\n[1] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/debug_logging\n[2] https://benoittgt.github.io/vcr/?v=6-3-1#/getting_started\n[3] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/allow_http_connections_when_no_cassette\n[4] https://benoittgt.github.io/vcr/?v=6-3-1#/configuration/ignore_request\n================================================================================\n\n",
    "count": 1,
    "first_occurrence": "2025-08-04T02:11:33-07:00",
    "last_occurrence": "2025-08-04T02:11:33-07:00"
  },
  "home_assistant:Timeout: Connection timeout": {
    "service": "home_assistant",
    "error": "Timeout: Connection timeout",
    "count": 2,
    "first_occurrence": "2025-08-04T03:33:36-07:00",
    "last_occurrence": "2025-08-04T03:35:02-07:00"
  },
  "openrouter:the server responded with status 400 for POST https://openrouter.ai/api/v1/chat/completions": {
    "service": "openrouter",
    "error": "the server responded with status 400 for POST https://openrouter.ai/api/v1/chat/completions",
    "count": 5,
    "first_occurrence": "2025-08-04T03:35:02-07:00",
    "last_occurrence": "2025-08-04T03:50:51-07:00"
  }
}
version: '3.8'

# Optional PostgreSQL overlay for production deployments
# Use with: docker-compose -f docker-compose.yml -f docker-compose.postgres.yml up -d

services:
  # PostgreSQL for Desiru persistence
  postgres:
    container_name: glitchcube_postgres
    image: postgres:16-alpine
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=glitchcube
      - POSTGRES_USER=glitchcube
      - POSTGRES_PASSWORD=${MASTER_PASSWORD}
      - TZ=America/Chicago
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U glitchcube"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Update Glitch Cube app to use PostgreSQL
  glitchcube:
    environment:
      - DATABASE_URL=postgres://glitchcube:${MASTER_PASSWORD}@postgres:5432/glitchcube
    depends_on:
      - postgres
      
  # Update Sidekiq to use PostgreSQL
  sidekiq:
    environment:
      - DATABASE_URL=postgres://glitchcube:${MASTER_PASSWORD}@postgres:5432/glitchcube
    depends_on:
      - postgres
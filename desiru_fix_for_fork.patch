diff --git a/lib/desiru/models/open_router.rb b/lib/desiru/models/open_router.rb
index 1234567..abcdefg 100644
--- a/lib/desiru/models/open_router.rb
+++ b/lib/desiru/models/open_router.rb
@@ -36,8 +36,9 @@ module Desiru
       def perform_completion(messages, options)
         model = options[:model] || @config[:model] || DEFAULT_MODEL
         temperature = options[:temperature] || @config[:temperature] || 0.7
         max_tokens = options[:max_tokens] || @config[:max_tokens] || 4096
 
-        # Prepare request parameters
+        # Prepare parameters for open_router gem
+        # The gem expects messages as first param, other options as named params
         params = {
           model: model,
-          messages: messages,
-          temperature: temperature,
-          max_tokens: max_tokens
+          extras: {
+            temperature: temperature,
+            max_tokens: max_tokens
+          }
         }
 
         # Add provider-specific options if needed
-        params[:provider] = options[:provider] if options[:provider]
+        params[:providers] = [options[:provider]] if options[:provider]
 
         # Add response format if specified
-        params[:response_format] = options[:response_format] if options[:response_format]
+        params[:extras][:response_format] = options[:response_format] if options[:response_format]
 
         # Add tools if provided (for models that support function calling)
         if options[:tools]
-          params[:tools] = options[:tools]
-          params[:tool_choice] = options[:tool_choice] if options[:tool_choice]
+          params[:extras][:tools] = options[:tools]
+          params[:extras][:tool_choice] = options[:tool_choice] if options[:tool_choice]
         end
 
-        # Make API call
-        response = @client.complete(params)
+        # Make API call with correct parameter structure
+        response = @client.complete(messages, **params)
 
         # Format response
         format_response(response, model)
       rescue StandardError => e
         handle_api_error(e)
       end
 
       def stream_complete(prompt, **options, &block)
         messages = prepare_messages(prompt, options[:messages])
         model = options[:model] || @config[:model] || DEFAULT_MODEL
         temperature = options[:temperature] || @config[:temperature] || 0.7
         max_tokens = options[:max_tokens] || @config[:max_tokens] || 4096
 
-        # Prepare streaming request
+        # Prepare parameters for open_router gem streaming
         params = {
           model: model,
-          messages: messages,
-          temperature: temperature,
-          max_tokens: max_tokens,
-          stream: true
+          stream: true,
+          extras: {
+            temperature: temperature,
+            max_tokens: max_tokens
+          }
         }
 
         # Stream response
-        @client.complete(params) do |chunk|
+        @client.complete(messages, **params) do |chunk|
           if chunk.dig('choices', 0, 'delta', 'content')
             content = chunk.dig('choices', 0, 'delta', 'content')
             block.call(content) if block_given?
           end
         end
       rescue StandardError => e
         handle_api_error(e)
       end
 
       private
@@ -145,17 +151,30 @@ module Desiru
 
       def handle_api_error(error)
         case error
+        when ::OpenRouter::ServerError
+          # OpenRouter-specific server errors
+          if error.message.include?('401') || error.message.downcase.include?('unauthorized')
+            raise ::Desiru::AuthenticationError, 'Invalid OpenRouter API key'
+          elsif error.message.include?('429') || error.message.downcase.include?('rate limit')
+            raise ::Desiru::RateLimitError, 'OpenRouter API rate limit exceeded'
+          elsif error.message.include?('402') || error.message.downcase.include?('payment')
+            raise ::Desiru::ModelError, 'OpenRouter payment required - check your account balance'
+          else
+            raise ::Desiru::ModelError, "OpenRouter API error: #{error.message}"
+          end
         when ::Faraday::UnauthorizedError
-          raise AuthenticationError, 'Invalid OpenRouter API key'
+          raise ::Desiru::AuthenticationError, 'Invalid OpenRouter API key'
         when ::Faraday::BadRequestError
-          raise InvalidRequestError, "Invalid request: #{error.message}"
+          raise ::Desiru::ModelError, "Invalid request: #{error.message}"
         when ::Faraday::TooManyRequestsError
-          raise RateLimitError, 'OpenRouter API rate limit exceeded'
-        when ::Faraday::PaymentRequiredError
-          raise APIError, 'OpenRouter payment required - check your account balance'
+          raise ::Desiru::RateLimitError, 'OpenRouter API rate limit exceeded'
+        when ::Faraday::Error
+          # Generic Faraday errors
+          raise ::Desiru::NetworkError, "Network error: #{error.message}"
         else
-          raise APIError, "OpenRouter API error: #{error.message}"
+          # Catch-all for unexpected errors
+          raise ::Desiru::ModelError, "Unexpected API error: #{error.class} - #{error.message}"
         end
       end
     end
   end
 end
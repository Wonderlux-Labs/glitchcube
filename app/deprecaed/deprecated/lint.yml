name: Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: lint-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write  # For commenting on PRs with lint results

jobs:
  rubocop:
    runs-on: ubuntu-latest
    name: Rubocop Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Run Rubocop
      run: |
        bundle exec rubocop --format json --out rubocop_results.json || true
        bundle exec rubocop --format progress || true
      continue-on-error: true
    
    - name: Upload Rubocop results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rubocop-results
        path: rubocop_results.json
    
    - name: Comment PR with Rubocop results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('rubocop_results.json', 'utf8'));
            const offenseCount = results.summary.offense_count;
            
            if (offenseCount > 0) {
              const fileResults = results.files.filter(file => file.offenses.length > 0);
              let comment = `## üîç Rubocop Linting Results\n\n`;
              comment += `Found **${offenseCount}** linting issues:\n\n`;
              
              fileResults.slice(0, 5).forEach(file => {
                comment += `### ${file.path}\n`;
                file.offenses.slice(0, 3).forEach(offense => {
                  comment += `- Line ${offense.location.start_line}: ${offense.message} (${offense.cop_name})\n`;
                });
                if (file.offenses.length > 3) {
                  comment += `- ... and ${file.offenses.length - 3} more issues\n`;
                }
                comment += `\n`;
              });
              
              if (fileResults.length > 5) {
                comment += `... and ${fileResults.length - 5} more files with issues\n\n`;
              }
              
              comment += `> ‚ÑπÔ∏è These are suggestions only and won't block the PR. Consider running \`bundle exec rubocop -a\` to auto-fix some issues.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## ‚úÖ Rubocop Linting Results\n\nNo linting issues found! Great job! üéâ'
              });
            }
          } catch (error) {
            console.log('Could not parse Rubocop results:', error);
          }
# Glitch Cube Health and Status Sensors
# These sensors monitor the art installation's health and state

# REST Health Sensors
- platform: rest
  resource: "http://glitchcube:4567/health"
  name: "Glitch Cube App Health"
  unique_id: "glitchcube_app_health"
  scan_interval: 30  # Check every 30 seconds
  timeout: 10
  headers:
    User-Agent: "Home Assistant Health Check"
  value_template: >
    {% if value_json is defined and value_json.status == "ok" %}
      online
    {% else %}
      offline
    {% endif %}
  json_attributes:
    - version
    - uptime
    - redis_status
    - database_status
  icon: "mdi:cube-outline"

# Internet Connectivity Health
- platform: rest
  resource: "http://httpbin.org/get"
  name: "Internet Connectivity"
  unique_id: "internet_connectivity"
  scan_interval: 60  # Check every minute
  timeout: 15
  value_template: >
    {% if value_json is defined %}
      connected
    {% else %}
      disconnected
    {% endif %}
  icon: "mdi:web"

# Template Sensors for Dynamic State Management
- platform: template
  sensors:
    # Last Interaction Time (updated via webhook)
    last_interaction_time:
      unique_id: "last_interaction_time"
      friendly_name: "Last Interaction Time"
      value_template: >
        {% set last = states('input_datetime.last_interaction') %}
        {% if last != 'unknown' and last != 'unavailable' %}
          {{ as_timestamp(last) | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
        {% else %}
          Never
        {% endif %}
      icon_template: "mdi:clock-outline"

    # Current Persona (updated via webhook)
    current_persona:
      unique_id: "current_persona"
      friendly_name: "Current Persona"
      value_template: >
        {% set persona = states('input_text.current_persona') %}
        {{ persona if persona not in ['unknown', 'unavailable', ''] else 'Default' }}
      icon_template: "mdi:account-multiple"

    # Installation Health Summary
    installation_health:
      unique_id: "installation_health"
      friendly_name: "Installation Health"
      value_template: >
        {% set app_health = states('sensor.glitch_cube_app_health') %}
        {% set internet = states('sensor.internet_connectivity') %}
        {% set temp = states('sensor.cube_cpu_thermal_0_temperature') | float(0) %}
        {% set offline_mode = states('input_boolean.offline_mode') %}
        {# 
          Health Logic:
            - critical if app offline
            - offline if internet disconnected & offline_mode on
            - degraded if internet disconnected
            - warning if temp > 158F
            - healthy otherwise
        #}
        {% if app_health == 'offline' %}
          critical
        {% elif internet == 'disconnected' and offline_mode == 'on' %}
          offline
        {% elif internet == 'disconnected' %}
          degraded
        {% elif temp is number and temp > 158 %}
          warning
        {% else %}
          healthy
        {% endif %}
      icon_template: >
        {% set health = states('sensor.installation_health') %}
        {% if health == 'critical' %}
          mdi:alert-circle
        {% elif health == 'offline' %}
          mdi:wifi-off
        {% elif health == 'degraded' %}
          mdi:alert
        {% elif health == 'warning' %}
          mdi:alert-outline
        {% else %}
          mdi:check-circle
        {% endif %}

# Note: Using Glances sensors instead:
# - sensor.cube_cpu_thermal_0_temperature (Fahrenheit)
# - sensor.cube_uptime

# Modern Template Sensors (Current Status for external status page)
- platform: template
  sensors:
    current_status:
      unique_id: "current_status"
      friendly_name: "Current Status"
      value_template: >
        {# Gather values #}
        {% set health = states('sensor.installation_health') %}
        {% set location = "Black Rock Desert, NV" %}
        {% set persona = states('sensor.current_persona') %}
        {% set last_interaction = states('sensor.last_interaction_time') %}
        {% set temp = states('sensor.cube_cpu_thermal_0_temperature') %}
        {% set internet = states('sensor.internet_connectivity') %}
        {% set weather = states('input_text.current_weather') %}
        {% set env = states('input_text.current_environment') %}
        {# Build status parts list #}
        {% set parts = [
          '📍 ' ~ location,
          '🎭 ' ~ (persona if persona not in ['unknown', 'unavailable', ''] else 'Default'),
          '🏥 ' ~ (health|title if health not in ['unknown', 'unavailable', ''] else 'Unknown')
        ] %}
        {% if temp not in ['unknown', 'unavailable', None, ''] %}
          {% set parts = parts + ['🌡️ ' ~ temp ~ '°F'] %}
        {% endif %}
        {% set parts = parts + ['🌐 ' ~ ('Online' if internet == 'connected' else 'Offline')] %}
        {% if last_interaction not in ['Never', 'unknown', 'unavailable', None, ''] %}
          {% set parts = parts + ['💬 Last: ' ~ last_interaction] %}
        {% endif %}
        {% if weather not in ['unknown', 'unavailable', None, ''] %}
          {% set parts = parts + ['☀️ ' ~ (weather[:30] ~ '...' if weather|length > 30 else weather)] %}
        {% endif %}
        {% if env not in ['unknown', 'unavailable', None, ''] %}
          {% set parts = parts + ['🌍 ' ~ (env[:30] ~ '...' if env|length > 30 else env)] %}
        {% endif %}
        {{ parts | join(' | ') }}
      icon_template: >
        {% set health = states('sensor.installation_health') %}
        {% set icons = {
          'critical': 'mdi:alert-circle-outline',
          'offline': 'mdi:cloud-off-outline',
          'degraded': 'mdi:alert-outline',
          'warning': 'mdi:thermometer-alert'
        } %}
        {{ icons.get(health, 'mdi:status-bar') }}

# To add the Black Rock Weather API automation and sensor, put the following block in configuration.yaml or a file included via !include under the 'template:' key.
# Do NOT place this in sensors.yaml, as it will break YAML parsing.

# Example for configuration.yaml:
#
# template:
#   - trigger:
#       - platform: time_pattern
#         minutes: "/15"  # Update every 15 minutes
#       - platform: homeassistant
#         event: start
#       - platform: state
#         entity_id: weather.openweathermap
#     action:
#       - service: weather.get_forecasts
#         data:
#           type: daily
#           target:
#             entity_id: weather.openweathermap
#         response_variable: daily_forecast
#       - service: weather.get_forecasts
#         data:
#           type: hourly
#           target:
#             entity_id: weather.openweathermap
#         response_variable: hourly_forecast
#     sensor:
#       - name: "Black Rock Weather API"
#         unique_id: "black_rock_weather_api"
#         state: "{{ now().isoformat() }}"
#         icon: "mdi:weather-partly-cloudy"
#         attributes:
#           weather_data: >
#             {
#               "timestamp": "{{ now().isoformat() }}",
#               "location": "Black Rock",
#               "current": {
#                 "temperature": {{ states('sensor.openweathermap_temperature') | float(0) }},
#                 "feels_like": {{ states('sensor.openweathermap_feels_like_temperature') | float(0) }},
#                 "condition": "{{ states('sensor.openweathermap_condition') }}",
#                 "weather_code": {{ states('sensor.openweathermap_weather_code') | int(0) }},
#                 "humidity": {{ states('sensor.openweathermap_humidity') | float(0) }},
#                 "pressure": {{ states('sensor.openweathermap_pressure') | float(0) }},
#                 "dew_point": {{ states('sensor.openweathermap_dew_point') | float(0) }},
#                 "visibility": {{ states('sensor.openweathermap_visibility') | float(0) }},
#                 "uv_index": {{ states('sensor.openweathermap_uv_index') | float(0) }},
#                 "cloud_coverage": {{ states('sensor.openweathermap_cloud_coverage') | float(0) }},
#                 "wind_speed": {{ states('sensor.openweathermap_wind_speed') | float(0) }},
#                 "wind_bearing": {{ states('sensor.openweathermap_wind_bearing') | float(0) }},
#                 "precipitation": {
#                   "rain": {{ states('sensor.openweathermap_rain') | float(0) }},
#                   "snow": {{ states('sensor.openweathermap_snow') | float(0) }},
#                   "kind": "{{ states('sensor.openweathermap_precipitation_kind') }}"
#                 }
#               },
#               "daily_forecast": {{ daily_forecast['weather.openweathermap'].forecast | tojson }},
#               "hourly_forecast": {{ hourly_forecast['weather.openweathermap'].forecast | tojson }}
#             }

# Glitch Cube Health and Status Sensors
# These sensors monitor the art installation's health and state

# REST Health Sensors
- platform: rest
  resource: "http://glitchcube.local:4567/health"
  name: "Glitch Cube App Health"
  unique_id: "glitchcube_app_health"
  scan_interval: 30  # Check every 30 seconds
  timeout: 10
  headers:
    User-Agent: "Home Assistant Health Check"
  value_template: >
    {% if value_json is defined and value_json.status == "ok" %}
      online
    {% else %}
      offline
    {% endif %}
  json_attributes:
    - version
    - uptime
    - redis_status
    - database_status
  icon: "mdi:cube-outline"
  
# Internet Connectivity Health
- platform: rest
  resource: "http://httpbin.org/get"
  name: "Internet Connectivity"
  unique_id: "internet_connectivity"
  scan_interval: 60  # Check every minute
  timeout: 15
  value_template: >
    {% if value_json is defined %}
      connected
    {% else %}
      disconnected
    {% endif %}
  icon: "mdi:web"

# Template Sensors for Dynamic State Management
- platform: template
  sensors:
    # Last Interaction Time (updated via webhook)
    last_interaction_time:
      unique_id: "last_interaction_time"
      friendly_name: "Last Interaction Time"
      value_template: "{{ states('input_datetime.last_interaction') | as_timestamp | timestamp_custom('%Y-%m-%d %H:%M:%S') if states('input_datetime.last_interaction') != 'unknown' else 'Never' }}"
      icon_template: "mdi:clock-outline"
      
    # Current Persona (updated via webhook)
    current_persona:
      unique_id: "current_persona"
      friendly_name: "Current Persona"
      value_template: "{{ states('input_text.current_persona') if states('input_text.current_persona') != 'unknown' else 'Default' }}"
      icon_template: "mdi:account-multiple"
      
    # Installation Health Summary
    installation_health:
      unique_id: "installation_health"
      friendly_name: "Installation Health"
      value_template: >
        {% set app_health = states('sensor.glitch_cube_app_health') %}
        {% set internet = states('sensor.internet_connectivity') %}
        {% set temp = states('sensor.cube_cpu_thermal_0_temperature') | float(0) %}
        {% set offline_mode = states('input_boolean.offline_mode') %}
        
        {% if app_health == 'offline' %}
          critical
        {% elif internet == 'disconnected' and offline_mode == 'on' %}
          offline
        {% elif internet == 'disconnected' %}
          degraded
        {% elif temp > 158 %}
          warning
        {% else %}
          healthy
        {% endif %}
      icon_template: >
        {% set health = states('sensor.installation_health') %}
        {% if health == 'critical' %}
          mdi:alert-circle
        {% elif health == 'offline' %}
          mdi:wifi-off
        {% elif health == 'degraded' %}
          mdi:alert
        {% elif health == 'warning' %}
          mdi:alert-outline
        {% else %}
          mdi:check-circle
        {% endif %}
  
# Note: Using Glances sensors instead:
# - sensor.cube_cpu_thermal_0_temperature (Fahrenheit)
# - sensor.cube_uptime
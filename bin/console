#!/usr/bin/env ruby
# frozen_string_literal: true

# Console script for interactive debugging with Pry
# Usage: bin/console

require 'bundler/setup'
require 'pry'
require 'dotenv/load'

# Load environment variables
Dotenv.load('.env', '.env.defaults')

# Set the environment
ENV['RACK_ENV'] ||= 'development'

# Require the main app and all dependencies
require_relative '../app'

# Load all lib files
Dir[File.join(__dir__, '../lib/**/*.rb')].each { |f| require f }

# Load all models if using ActiveRecord
if defined?(ActiveRecord)
  Dir[File.join(__dir__, '../app/models/**/*.rb')].each { |f| require f }
end

# Helper methods available in console
module ConsoleHelpers
  def reload!
    puts '🔄 Reloading...'

    # Clear Ruby's loaded features for our app files
    $LOADED_FEATURES.reject! { |f| f.include?('/glitchcube/') }

    # Reload lib files
    Dir[File.join(__dir__, '../lib/**/*.rb')].each { |f| load f }

    # Reload models
    if defined?(ActiveRecord)
      Dir[File.join(__dir__, '../app/models/**/*.rb')].each { |f| load f }
    end

    puts '✅ Reloaded!'
    true
  end

  def app
    @app ||= Sinatra::Application
  end

  def ha
    @ha ||= HomeAssistantClient.new
  end

  def tts(character = :default)
    @tts ||= {}
    @tts[character] ||= Services::CharacterService.new(character: character)
  end

  def openrouter
    @openrouter ||= Services::OpenRouterService.new
  end

  def config
    GlitchCube.config
  end

  def test_speak(message = 'Hello from the console!', character = :default)
    tts(character).speak(message)
  end

  def test_conversation(message = "What's your purpose?")
    handler = Services::ConversationHandlerService.new
    response = handler.process(message)
    puts response[:message]
    response
  end

  def list_characters
    Services::CharacterService::CHARACTERS.keys
  end

  def switch_character(name)
    character = Services::CharacterService::CHARACTERS[name.to_sym]
    if character
      puts "🎭 Switched to #{character[:name]}"
      puts "   #{character[:description]}"
      tts(name)
    else
      puts "❌ Character not found. Available: #{list_characters.join(', ')}"
    end
  end

  def test_models
    puts 'Testing OpenRouter connection...'
    models = openrouter.available_models
    puts "✅ Found #{models.count} models"
    models.first(5).each do |model|
      puts "  - #{model['id']}: $#{model['pricing']['prompt']} per token"
    end
  rescue StandardError => e
    puts "❌ Error: #{e.message}"
  end

  def test_ha
    puts 'Testing Home Assistant connection...'
    states = ha.states
    puts "✅ Connected! Found #{states.count} entities"
    states.first(5).each do |state|
      puts "  - #{state['entity_id']}: #{state['state']}"
    end
  rescue StandardError => e
    puts "❌ Error: #{e.message}"
  end

  def help
    puts <<~HELP
      🎮 GlitchCube Console Commands:

      Core Objects:
        app           - Sinatra application instance
        ha            - HomeAssistantClient instance
        tts(char)     - TTS service for character (default: :default)
        openrouter    - OpenRouterService instance
        config        - GlitchCube configuration

      Testing:
        test_speak(msg, char)  - Test TTS with message and character
        test_conversation(msg) - Test conversation handler
        test_models           - Test OpenRouter connection
        test_ha              - Test Home Assistant connection

      Characters:
        list_characters      - Show available characters
        switch_character(name) - Switch to a character
      #{'  '}
      Utilities:
        reload!             - Reload all application code
        help               - Show this help message

      Examples:
        tts(:buddy).speak("Hello!")
        test_conversation("Tell me a joke")
        switch_character(:jax)
        ha.states
    HELP
  end
end

# Include helpers in the console
include ConsoleHelpers

# Set up a nice prompt
Pry.config.prompt = Pry::Prompt.new(
  'glitchcube',
  'GlitchCube interactive console',
  [
    proc { |_obj, nest_level, _|
      prompt = '🎲 glitchcube'
      prompt += ":#{nest_level}" if nest_level.positive?
      "#{prompt}> "
    },
    proc { |_obj, nest_level, _|
      prompt = '🎲 glitchcube'
      prompt += ":#{nest_level}" if nest_level.positive?
      "#{prompt}* "
    }
  ]
)

# Welcome message
puts <<~BANNER

  ╔═══════════════════════════════════════╗
  ║     🎲 GlitchCube Console 🎲          ║
  ╠═══════════════════════════════════════╣
  ║  Interactive Ruby console with app    ║
  ║  environment fully loaded.            ║
  ║                                        ║
  ║  Type 'help' for available commands   ║
  ║  Type 'exit' to quit                  ║
  ╚═══════════════════════════════════════╝

  Environment: #{ENV.fetch('RACK_ENV', nil)}
  Ruby: #{RUBY_VERSION}

BANNER

# Optional: Try to connect to services (comment out if hanging)
# begin
#   print "🔌 Checking Home Assistant... "
#   ha.states
#   puts "✅"
# rescue => e
#   puts "❌ (#{e.class})"
# end

# begin
#   print "🤖 Checking OpenRouter... "
#   openrouter.available_models
#   puts "✅"
# rescue => e
#   puts "❌ (#{e.class})"
# end

puts ''
puts "Type 'help' for commands"
puts ''

# Start the console
Pry.start

# Starlink Bandwidth Monitoring Sensors
# Direct gRPC API polling to track data usage for Burning Man 50GB limit

# REST sensor to poll Starlink gRPC status endpoint
- platform: rest
  name: "Starlink Status"
  resource: "http://192.168.100.1:9000/api/v1/starlink/status"  
  method: GET
  scan_interval: 600  # Poll every 10 minutes to conserve bandwidth
  timeout: 30
  headers:
    User-Agent: "Glitch Cube Bandwidth Monitor"
  json_attributes:
    - downlink_throughput_bps
    - uplink_throughput_bps
    - snr
    - pop_ping_latency_ms
    - state
    - uptime_s
  value_template: "{{ value_json.state | default('Unknown') }}"
  availability_template: "{{ value_json is defined }}"

# Alternative method using grpcurl command via command_line sensor
- platform: command_line
  name: "Starlink gRPC Data"
  command: >
    timeout 30s grpcurl -plaintext -d '{}' 192.168.100.1:9200 SpaceX.API.Device.Device/Handle 2>/dev/null |
    jq '.dishGetStatus.downlinkThroughputBps, .dishGetStatus.uplinkThroughputBps, .dishGetStatus.snr, .dishGetStatus.popPingLatencyMs' 2>/dev/null |
    paste -sd ',' || echo "0,0,0,0"
  scan_interval: 600  # Poll every 10 minutes
  command_timeout: 45
  value_template: >
    {% set values = value.split(',') %}
    {% if values | length == 4 %}
      {{ (values[0] | float(0) + values[1] | float(0)) | round(0) }}
    {% else %}
      0
    {% endif %}
  unit_of_measurement: "bps"
  json_attributes:
    - downlink_bps
    - uplink_bps
    - snr
    - latency_ms

# Template sensors for bandwidth calculations
- platform: template
  sensors:
    starlink_downlink_mbps:
      friendly_name: "Starlink Downlink Speed"
      value_template: >
        {% if state_attr('sensor.starlink_status', 'downlink_throughput_bps') %}
          {{ (state_attr('sensor.starlink_status', 'downlink_throughput_bps') | float / 1000000) | round(2) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: "Mbps"
      icon_template: mdi:download
      
    starlink_uplink_mbps:
      friendly_name: "Starlink Uplink Speed"
      value_template: >
        {% if state_attr('sensor.starlink_status', 'uplink_throughput_bps') %}
          {{ (state_attr('sensor.starlink_status', 'uplink_throughput_bps') | float / 1000000) | round(2) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: "Mbps"
      icon_template: mdi:upload

    starlink_total_throughput_mbps:
      friendly_name: "Starlink Total Throughput"
      value_template: >
        {% set down = state_attr('sensor.starlink_status', 'downlink_throughput_bps') | float(0) %}
        {% set up = state_attr('sensor.starlink_status', 'uplink_throughput_bps') | float(0) %}
        {{ ((down + up) / 1000000) | round(2) }}
      unit_of_measurement: "Mbps"
      icon_template: mdi:swap-vertical

    starlink_signal_quality:
      friendly_name: "Starlink Signal Quality"
      value_template: >
        {% if state_attr('sensor.starlink_status', 'snr') %}
          {{ state_attr('sensor.starlink_status', 'snr') | float | round(1) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: "dB"
      icon_template: mdi:signal

    starlink_latency:
      friendly_name: "Starlink Latency"
      value_template: >
        {% if state_attr('sensor.starlink_status', 'pop_ping_latency_ms') %}
          {{ state_attr('sensor.starlink_status', 'pop_ping_latency_ms') | float | round(1) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: "ms"
      icon_template: mdi:timer-outline

# Data usage accumulation sensors using utility_meter
utility_meter:
  starlink_daily_usage:
    source: sensor.starlink_data_usage_bytes
    cycle: daily
    name: "Starlink Daily Data Usage"
    
  starlink_weekly_usage:
    source: sensor.starlink_data_usage_bytes
    cycle: weekly
    name: "Starlink Weekly Data Usage"
    offset:
      days: 0  # Week starts on Sunday (Burning Man week)

# Bandwidth monitoring sensors
- platform: template
  sensors:
    starlink_data_usage_mb_per_minute:
      friendly_name: "Starlink Data Usage per Minute"
      value_template: >
        {% set down = state_attr('sensor.starlink_status', 'downlink_throughput_bps') | float(0) %}
        {% set up = state_attr('sensor.starlink_status', 'uplink_throughput_bps') | float(0) %}
        {% set total_bps = down + up %}
        {% set mb_per_minute = (total_bps * 60) / 8 / 1000000 %}
        {{ mb_per_minute | round(3) }}
      unit_of_measurement: "MB/min"
      icon_template: mdi:speedometer

    burning_man_weekly_usage_percent:
      friendly_name: "Burning Man Weekly Usage %"
      value_template: >
        {% set weekly_gb = states('sensor.starlink_weekly_usage') | float(0) / 1000000000 %}
        {% set percent = (weekly_gb / 50) * 100 %}
        {{ percent | round(1) }}
      unit_of_measurement: "%"
      icon_template: >
        {% set percent = states('sensor.burning_man_weekly_usage_percent') | float(0) %}
        {% if percent > 95 %}
          mdi:gauge-full
        {% elif percent > 80 %}
          mdi:gauge-high
        {% elif percent > 60 %}
          mdi:gauge
        {% else %}
          mdi:gauge-low
        {% endif %}

    burning_man_daily_usage_gb:
      friendly_name: "Today's Data Usage"
      value_template: >
        {{ (states('sensor.starlink_daily_usage') | float(0) / 1000000000) | round(2) }}
      unit_of_measurement: "GB"
      icon_template: mdi:chart-line

    burning_man_weekly_usage_gb:
      friendly_name: "This Week's Data Usage"
      value_template: >
        {{ (states('sensor.starlink_weekly_usage') | float(0) / 1000000000) | round(2) }}
      unit_of_measurement: "GB"
      icon_template: mdi:chart-timeline-variant

    burning_man_remaining_data:
      friendly_name: "Remaining Data This Week"
      value_template: >
        {% set used_gb = states('sensor.burning_man_weekly_usage_gb') | float(0) %}
        {% set remaining = 50 - used_gb %}
        {{ remaining | round(2) }}
      unit_of_measurement: "GB"
      icon_template: >
        {% set remaining = states('sensor.burning_man_remaining_data') | float(50) %}
        {% if remaining < 5 %}
          mdi:database-alert
        {% elif remaining < 15 %}
          mdi:database-minus
        {% else %}
          mdi:database-check
        {% endif %}

    estimated_days_remaining:
      friendly_name: "Data Will Last (Days)"
      value_template: >
        {% set remaining_gb = states('sensor.burning_man_remaining_data') | float(0) %}
        {% set daily_avg = states('sensor.burning_man_daily_usage_gb') | float(0.1) %}
        {% if daily_avg > 0 %}
          {{ (remaining_gb / daily_avg) | round(1) }}
        {% else %}
          7
        {% endif %}
      unit_of_measurement: "days"
      icon_template: mdi:calendar-range

# Connection status sensor
- platform: template
  sensors:      
    starlink_connection_status:
      friendly_name: "Starlink Connection"
      value_template: >
        {% set state = states('sensor.starlink_status') %}
        {% if state == 'CONNECTED' %}
          Connected
        {% elif state == 'SEARCHING' %}
          Searching
        {% elif state == 'BOOTING' %}
          Booting
        {% else %}
          {{ state | title }}
        {% endif %}
      icon_template: >
        {% set state = states('sensor.starlink_status') %}
        {% if state == 'CONNECTED' %}
          mdi:satellite-variant
        {% elif state == 'SEARCHING' %}
          mdi:satellite-uplink
        {% else %}
          mdi:satellite-off
        {% endif %}
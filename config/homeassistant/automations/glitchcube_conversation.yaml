# GlitchCube Conversation Automations
# Handles proactive conversations and webhook integration

# Proactive conversation on motion detection
- id: glitchcube_motion_conversation
  alias: "GlitchCube: Start Conversation on Motion"
  description: "Trigger proactive conversation when motion is detected"
  trigger:
    - platform: state
      entity_id: binary_sensor.glitchcube_motion
      to: 'on'
      for:
        seconds: 2  # Wait 2 seconds to avoid false triggers
  condition:
    # Don't trigger too frequently (5 minute cooldown)
    - condition: template
      value_template: >
        {{ (as_timestamp(now()) - as_timestamp(state_attr('automation.glitchcube_motion_conversation', 'last_triggered') | default(0))) > 300 }}
  action:
    - service: rest_command.glitchcube_start_conversation
      data:
        trigger: "motion_detected"
        context:
          location: "{{ states('input_text.glitchcube_location') }}"
          time_of_day: "{{ now().strftime('%H:%M') }}"

# Battery low conversation
- id: glitchcube_battery_conversation
  alias: "GlitchCube: Request Charging Help"
  description: "Ask for help when battery is low"
  trigger:
    - platform: numeric_state
      entity_id: sensor.glitchcube_battery
      below: 20
  condition:
    - condition: template
      value_template: >
        {{ (as_timestamp(now()) - as_timestamp(state_attr('automation.glitchcube_battery_conversation', 'last_triggered') | default(0))) > 1800 }}
  action:
    - service: rest_command.glitchcube_start_conversation
      data:
        trigger: "battery_low"
        context:
          battery_level: "{{ states('sensor.glitchcube_battery') }}"
          charging_status: "{{ states('binary_sensor.glitchcube_charging') }}"

# Webhook handler for conversation events (if needed for future use)
# Currently conversation state is managed entirely by Sinatra backend
- id: glitchcube_conversation_webhook
  alias: "GlitchCube: Handle Conversation Webhook"
  description: "Process conversation events from Ruby backend"
  trigger:
    - platform: webhook
      webhook_id: "glitchcube_conversation"
      allowed_methods:
        - POST
  action:
    - choose:
        # Log conversation events for debugging
        - conditions:
            - condition: template
              value_template: "{{ trigger.json.event_type is defined }}"
          sequence:
            - service: system_log.write
              data:
                message: "GlitchCube conversation event: {{ trigger.json.event_type }}"
                level: info

# Idle timeout - start conversation if no interaction
- id: glitchcube_idle_conversation
  alias: "GlitchCube: Idle Timeout Conversation"
  description: "Start conversation after period of inactivity"
  trigger:
    - platform: state
      entity_id: input_datetime.glitchcube_last_interaction
      for:
        minutes: 30
  condition:
    - condition: time
      after: "09:00:00"
      before: "22:00:00"
  action:
    - service: rest_command.glitchcube_start_conversation
      data:
        trigger: "interaction_timeout"
        context:
          last_interaction: "{{ states('input_datetime.glitchcube_last_interaction') }}"
          topic: "{{ ['art', 'existence', 'creativity', 'consciousness', 'play'] | random }}"

# New person detected
- id: glitchcube_new_person
  alias: "GlitchCube: New Person Introduction"
  description: "Introduce when new person detected"
  trigger:
    - platform: state
      entity_id: sensor.glitchcube_faces_detected
      from: '0'
  action:
    - service: rest_command.glitchcube_start_conversation
      data:
        trigger: "new_person"
        context:
          faces_count: "{{ states('sensor.glitchcube_faces_detected') }}"

# Weather change notification
- id: glitchcube_weather_conversation
  alias: "GlitchCube: Weather Change Discussion"
  description: "Comment on significant weather changes"
  trigger:
    - platform: state
      entity_id: weather.glitchcube_location
      attribute: condition
  condition:
    - condition: template
      value_template: >
        {{ trigger.from_state.attributes.condition != trigger.to_state.attributes.condition }}
    - condition: template
      value_template: >
        {{ (as_timestamp(now()) - as_timestamp(state_attr('automation.glitchcube_weather_conversation', 'last_triggered') | default(0))) > 7200 }}
  action:
    - service: rest_command.glitchcube_start_conversation
      data:
        trigger: "weather_change"
        context:
          weather_description: "{{ trigger.to_state.attributes.condition }}"
          temperature: "{{ trigger.to_state.attributes.temperature }}"
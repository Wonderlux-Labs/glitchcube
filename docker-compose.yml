version: '3.8'

services:

  # Home Assistant container
  homeassistant:
    container_name: glitchcube_homeassistant
    image: homeassistant/home-assistant:stable
    volumes:
      # Use bind mount for production, named volume for dev
      - ${HA_CONFIG_PATH:-./data/production/homeassistant}:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
    depends_on:
      mariadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8123/manifest.json"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s  # 5 minutes for initial startup
    env_file: .env
    environment:
      - RECORDER_DB_URL=${RECORDER_DB_URL:-mysql://homeassistant:homeassistant@127.0.0.1:3306/homeassistant?charset=utf8mb4}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 3G
        reservations:
          memory: 1G  # Guarantee minimum memory

  # Glitch Cube Sinatra application
  glitchcube:
    container_name: glitchcube_app
    build: .
    image: glitchcube:latest
    volumes:
      # Use environment variable to switch between dev/prod paths
      - ${GLITCHCUBE_DATA_PATH:-./data/production/glitchcube}:/app/data
      - ./docs/context:/app/data/context_documents:ro
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    network_mode: host
    restart: unless-stopped
    env_file: .env
    environment:
      - RACK_ENV=${RACK_ENV:-production}
      - REDIS_URL=redis://localhost:6379/0
      - HA_URL=http://localhost:8123
      - APP_ROOT=/app
      - DATABASE_URL=${DATABASE_URL:-sqlite://data/production/glitchcube.db}
    depends_on:
      - homeassistant
      - redis
      - mariadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4567/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1G

  # Redis for Sidekiq background jobs
  redis:
    container_name: glitchcube_redis
    image: redis:7-alpine
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    network_mode: host
    command: redis-server --save 60 1 --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M  # Container limit higher than Redis internal limit

  # Sidekiq worker (separate container for background jobs)
  sidekiq:
    container_name: glitchcube_sidekiq
    build: .
    image: glitchcube:latest
    command: bundle exec sidekiq -r ./app.rb
    volumes:
      - ${GLITCHCUBE_DATA_PATH:-./data/production/glitchcube}:/app/data
      - ./docs/context:/app/data/context_documents:ro
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    env_file: .env
    environment:
      - RACK_ENV=${RACK_ENV:-production}
      - REDIS_URL=redis://localhost:6379/0
      - HA_URL=http://localhost:8123
      - APP_ROOT=/app
      - DATABASE_URL=${DATABASE_URL:-sqlite://data/production/glitchcube.db}
    depends_on:
      - homeassistant
      - redis
      - mariadb
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Management UI
  portainer:
    container_name: glitchcube_portainer
    image: portainer/portainer-ce:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    network_mode: host
    command: -H unix:///var/run/docker.sock --bind :9009 --bind-https :9443
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # MQTT broker for Home Assistant integrations
  mosquitto:
    container_name: glitchcube_mosquitto
    image: eclipse-mosquitto:2.0
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    restart: unless-stopped
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_sub -t 'test/health' -C 1 -W 3 -i healthcheck || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # ESPHome Dashboard
  esphome:
    container_name: glitchcube_esphome
    image: esphome/esphome:latest
    volumes:
      - esphome_config:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    env_file: .env
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Music Assistant for voice/audio control
  music-assistant:
    container_name: glitchcube_music_assistant
    image: ghcr.io/music-assistant/server:latest
    volumes:
      - music_assistant_data:/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # System Monitor
  glances:
    container_name: glitchcube_glances
    image: nicolargo/glances:latest
    restart: unless-stopped
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro
    environment:
      - GLANCES_OPT=-w --disable-plugin network
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # MariaDB (preferred by Home Assistant for logging and performance)
  mariadb:
    container_name: glitchcube_mariadb
    image: mariadb:11.5
    volumes:
      - ./data/production/mariadb:/var/lib/mysql
      - ./config/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-glitchcube123}
      - MYSQL_DATABASE=glitchcube
      - MYSQL_USER=glitchcube
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-glitchcube}
      # Home Assistant database (shared instance)
      - MYSQL_ADDITIONAL_DATABASE=homeassistant
    restart: unless-stopped
    network_mode: host
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max-connections=250
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # MariaDB always starts for Home Assistant recorder
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          memory: 256M

# Named volumes for containers
volumes:
  glitchcube_data:
    driver: local
  homeassistant_config:
    driver: local
  portainer_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  esphome_config:
    driver: local
  music_assistant_data:
    driver: local
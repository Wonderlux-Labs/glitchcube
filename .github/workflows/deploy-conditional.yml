name: Deploy to Glitch Cube (Conditional)

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  determine-deployment:
    runs-on: ubuntu-latest
    outputs:
      deployment-type: ${{ steps.check.outputs.type }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check deployment type
      id: check
      run: |
        # Check if MAC_MINI_DEPLOYMENT is set in .env or .env.example
        if grep -q "MAC_MINI_DEPLOYMENT=true" .env 2>/dev/null || grep -q "MAC_MINI_DEPLOYMENT=true" .env.example 2>/dev/null; then
          echo "type=mac-mini" >> $GITHUB_OUTPUT
          echo "üñ•Ô∏è Mac mini deployment detected"
        else
          echo "type=docker" >> $GITHUB_OUTPUT
          echo "üê≥ Docker/Pi deployment detected"
        fi

  deploy-mac-mini:
    needs: determine-deployment
    if: needs.determine-deployment.outputs.deployment-type == 'mac-mini'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Trigger Home Assistant VM deployment
      env:
        HA_WEBHOOK_URL: ${{ secrets.HA_WEBHOOK_URL }}
      run: |
        echo "üè† Triggering Home Assistant VM deployment..."
        
        # Send webhook to Home Assistant
        curl -X POST "$HA_WEBHOOK_URL" \
          -H "Content-Type: application/json" \
          -d '{
            "ref": "refs/heads/main",
            "after": "${{ github.sha }}",
            "repository": {
              "full_name": "${{ github.repository }}"
            }
          }' \
          --fail \
          --show-error \
          || echo "‚ö†Ô∏è  Failed to trigger HA deployment (may be updating already)"
    
    - name: Trigger Sinatra host deployment
      env:
        SINATRA_DEPLOY_URL: ${{ secrets.SINATRA_DEPLOY_URL }}
        GITHUB_WEBHOOK_SECRET: ${{ secrets.GITHUB_WEBHOOK_SECRET }}
      run: |
        echo "üöÄ Triggering Sinatra host deployment..."
        
        # Create the payload
        PAYLOAD='{
          "ref": "refs/heads/main",
          "after": "${{ github.sha }}",
          "repository": {
            "full_name": "${{ github.repository }}"
          }
        }'
        
        # Calculate signature (if webhook secret is set)
        if [ -n "$GITHUB_WEBHOOK_SECRET" ]; then
          SIGNATURE="sha256=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$GITHUB_WEBHOOK_SECRET" | cut -d' ' -f2)"
          
          curl -X POST "$SINATRA_DEPLOY_URL" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: $SIGNATURE" \
            -d "$PAYLOAD" \
            --fail \
            --show-error \
            || echo "‚ö†Ô∏è  Failed to trigger Sinatra deployment"
        else
          # No signature verification
          curl -X POST "$SINATRA_DEPLOY_URL" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            --fail \
            --show-error \
            || echo "‚ö†Ô∏è  Failed to trigger Sinatra deployment"
        fi

  deploy-docker:
    needs: determine-deployment
    if: needs.determine-deployment.outputs.deployment-type == 'docker'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Docker/Pi
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        
        # Deploy using existing Docker deployment script
        ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST \
          "cd /home/$DEPLOY_USER/glitchcube && bash scripts/deploy/pull-from-github.sh"
        
        echo "‚úÖ Docker deployment complete!"

  notify-completion:
    needs: [deploy-mac-mini, deploy-docker]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-mac-mini.result }}" == "success" ] || [ "${{ needs.deploy-docker.result }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
        else
          echo "‚ùå Deployment may have failed - check logs"
        fi
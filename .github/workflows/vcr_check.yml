name: VCR Cassette Check

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

concurrency:
  group: vcr-check-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write  # To comment on PRs about missing cassettes

jobs:
  check-cassettes:
    runs-on: ubuntu-latest
    name: Verify VCR Cassettes are Complete
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      RACK_ENV: test
      CI: true  # This triggers CI mode in VCR
      OPENROUTER_API_KEY: dummy-key-for-ci
      HOME_ASSISTANT_TOKEN: dummy-token-for-ci
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3
        bundler-cache: true
    
    - name: Wait for services
      run: |
        sudo apt-get update && sudo apt-get install -y postgresql-client
        for i in $(seq 1 10); do
          pg_isready -h localhost -p 5432 -U postgres && break
          echo "Waiting for PostgreSQL... ($i/10)"
          sleep 5
        done
      env:
        PGPASSWORD: postgres
    
    - name: Set up database
      run: |
        createdb -h localhost -U postgres glitchcube_test
        bundle exec rake db:migrate
      env:
        PGPASSWORD: postgres
    
    - name: Check for Missing VCR Cassettes
      id: vcr_check
      run: |
        # Run tests in CI mode - should fail if cassettes missing
        echo "üîç Checking for missing VCR cassettes..."
        
        # Create logs directory
        mkdir -p logs
        
        # Run tests and capture output
        if bundle exec rspec 2>&1 | tee test_output.log; then
          echo "‚úÖ All VCR cassettes present"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Missing VCR cassettes detected"
          echo "status=failure" >> $GITHUB_OUTPUT
          
          # Look for VCR-related errors in output
          if grep -q "EXTERNAL API CALL WITHOUT VCR CASSETTE" test_output.log; then
            echo "üö® Found external API calls without cassettes!"
            echo "vcr_errors=true" >> $GITHUB_OUTPUT
          fi
          
          # Check for missing cassette log
          if [[ -f logs/vcr_missing_cassettes.log ]]; then
            echo "üìã Missing cassettes log found"
            echo "missing_log=true" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Report Missing Cassettes
      if: steps.vcr_check.outputs.status == 'failure'
      run: |
        echo "üö® VCR CASSETTE ISSUES DETECTED"
        echo "================================"
        
        if [[ -f logs/vcr_missing_cassettes.log ]]; then
          echo "üìã Missing cassettes:"
          cat logs/vcr_missing_cassettes.log
        fi
        
        if [[ -f test_output.log ]]; then
          echo "üìã Test output with VCR errors:"
          grep -A5 -B5 "EXTERNAL API CALL\|VCR CASSETTE" test_output.log || true
        fi
        
        echo ""
        echo "üîß TO FIX LOCALLY:"
        echo "1. Record missing cassettes:"
        echo "   VCR_RECORD=true bundle exec rspec"
        echo "2. Commit the new cassettes:"
        echo "   git add spec/vcr_cassettes/"
        echo "   git commit -m 'Add missing VCR cassettes'"
        echo "3. Push the changes"
        
        exit 1
    
    - name: Validate Cassette Structure  
      if: steps.vcr_check.outputs.status == 'success'
      run: |
        echo "üîç Validating VCR cassette structure..."
        
        # Check for sensitive data in cassettes
        if find spec/vcr_cassettes -name "*.yml" -exec grep -l "sk-" {} \; | head -5; then
          echo "‚ö†Ô∏è  WARNING: Potential API keys found in cassettes"
          echo "Check that sensitive data is properly filtered"
        fi
        
        # Check cassette file sizes (flag unusually large ones)
        find spec/vcr_cassettes -name "*.yml" -size +1M | while read cassette; do
          echo "‚ö†Ô∏è  Large cassette detected: $cassette"
          echo "Consider if this cassette contains excessive response data"
        done
        
        # Count total cassettes
        total_cassettes=$(find spec/vcr_cassettes -name "*.yml" | wc -l)
        echo "üìä Total VCR cassettes: $total_cassettes"
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && steps.vcr_check.outputs.status == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = `## üö® VCR Cassettes Missing

          This PR introduces tests that make external API calls without VCR cassettes.
          
          **This could cause API costs if deployed!**
          
          ### To Fix:
          1. Run locally: \`VCR_RECORD=true bundle exec rspec\`
          2. Commit new cassettes: \`git add spec/vcr_cassettes/\`
          3. Push the changes
          
          ### Details:
          `;
          
          if (fs.existsSync('logs/vcr_missing_cassettes.log')) {
            const logContent = fs.readFileSync('logs/vcr_missing_cassettes.log', 'utf8');
            comment += `\n\`\`\`\n${logContent}\n\`\`\``;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  check-no-manual-cassettes:
    runs-on: ubuntu-latest
    name: Check for Manual Cassette Usage
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Manual VCR Usage
      run: |
        echo "üîç Checking for manual VCR cassette usage..."
        
        # Look for manual VCR.use_cassette calls
        if grep -r "VCR\.use_cassette" spec/ --exclude-dir=vcr_cassettes; then
          echo "‚ùå Manual VCR.use_cassette calls found!"
          echo "Please migrate to 'vcr: true' pattern"
          exit 1
        fi
        
        # Look for old helper usage
        if grep -r "with_vcr_cassette\|with_openrouter_cassette\|with_home_assistant_cassette" spec/ --exclude-dir=support; then
          echo "‚ùå Old VCR helper usage found!"
          echo "Please migrate to new helper patterns"
          exit 1
        fi
        
        # Look for old environment variables in CI
        if grep -r "VCR_OVERRIDE\|VCR_AUTO_RECORD" .github/; then
          echo "‚ùå Old VCR environment variables in CI config!"
          echo "Please use only VCR_RECORD=true for recording"
          exit 1
        fi
        
        echo "‚úÖ No manual VCR usage detected"
name: VCR Cassette Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'spec/**'
      - 'lib/**'
      - 'app/**'
      - '.github/workflows/vcr_validation.yml'
  
  push:
    branches: [ main ]

jobs:
  vcr-validation:
    name: Validate VCR Cassettes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          
      - name: Check for missing VCR cassettes
        run: |
          echo "üîç Scanning for VCR usage patterns..."
          
          # Check if any tests use vcr: true but don't have cassettes
          missing_cassettes=()
          
          # Find all spec files with vcr: true
          while IFS= read -r -d '' spec_file; do
            if grep -q "vcr:\s*true" "$spec_file"; then
              echo "üìÅ Checking: $spec_file"
              
              # Extract test descriptions that use vcr: true
              grep -n "it.*vcr:\s*true" "$spec_file" | while read -r line; do
                line_num=$(echo "$line" | cut -d: -f1)
                test_desc=$(echo "$line" | grep -o "'[^']*'" | head -1 | tr -d "'")
                
                if [ -n "$test_desc" ]; then
                  # Generate expected cassette path
                  spec_name=$(basename "$spec_file" .rb | sed 's/_spec$//')
                  cassette_name=$(echo "$test_desc" | tr 'A-Z ' 'a-z_' | sed 's/[^a-z0-9_-]//g' | sed 's/__*/_/g' | sed 's/^_\|_$//g')
                  expected_cassette="spec/vcr_cassettes/${spec_name}/${cassette_name}.yml"
                  
                  if [ ! -f "$expected_cassette" ]; then
                    echo "‚ùå Missing cassette: $expected_cassette"
                    echo "   Test: $spec_file:$line_num - $test_desc"
                    echo "MISSING_CASSETTE=true" >> $GITHUB_ENV
                  else
                    echo "‚úÖ Found cassette: $expected_cassette"
                  fi
                fi
              done
            fi
          done < <(find spec -name "*_spec.rb" -print0)
          
      - name: Validate existing cassettes
        run: |
          echo "üîç Validating existing cassettes..."
          
          cassette_count=$(find spec/vcr_cassettes -name "*.yml" 2>/dev/null | wc -l || echo "0")
          echo "üìº Found $cassette_count VCR cassettes"
          
          if [ "$cassette_count" -gt 0 ]; then
            echo "‚úÖ VCR cassettes directory exists with cassettes"
            
            # Check for malformed cassettes
            malformed=false
            while IFS= read -r -d '' cassette; do
              if ! ruby -e "require 'yaml'; YAML.load_file('$cassette')" 2>/dev/null; then
                echo "‚ùå Malformed cassette: $cassette"
                malformed=true
              fi
            done < <(find spec/vcr_cassettes -name "*.yml" -print0)
            
            if [ "$malformed" = true ]; then
              echo "MALFORMED_CASSETTES=true" >> $GITHUB_ENV
            fi
          fi
          
      - name: Check for unhandled requests in logs
        run: |
          echo "üîç Checking for unhandled VCR requests..."
          
          if [ -f "logs/vcr_unhandled_requests.log" ] && [ -s "logs/vcr_unhandled_requests.log" ]; then
            echo "‚ö†Ô∏è  Found unhandled VCR requests:"
            tail -20 logs/vcr_unhandled_requests.log
            echo "UNHANDLED_REQUESTS=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No unhandled VCR requests found"
          fi
          
      - name: Detect VCR anti-patterns
        run: |
          echo "üîç Scanning for VCR anti-patterns..."
          
          # Check for deprecated patterns
          if grep -r "VCR.use_cassette" spec/ --include="*.rb"; then
            echo "‚ùå Found deprecated VCR.use_cassette pattern"
            echo "   Use 'vcr: true' instead"
            echo "VCR_ANTIPATTERNS=true" >> $GITHUB_ENV
          fi
          
          if grep -r "VCR_OVERRIDE" spec/ --include="*.rb" || grep -r "VCR_AUTO_RECORD" spec/ --include="*.rb"; then
            echo "‚ùå Found deprecated VCR environment variables"
            echo "   Use 'VCR_RECORD=true' instead"
            echo "VCR_ANTIPATTERNS=true" >> $GITHUB_ENV
          fi
          
          if grep -r "cassette_name:" spec/ --include="*.rb"; then
            echo "‚ö†Ô∏è  Found manual cassette naming (prefer auto-generated names)"
            echo "   Consider using 'vcr: true' with descriptive test names"
          fi
          
      - name: Generate VCR report
        run: |
          echo "üìä VCR Configuration Report"
          echo "=========================="
          
          total_specs=$(find spec -name "*_spec.rb" | wc -l)
          vcr_specs=$(grep -r "vcr:" spec/ --include="*.rb" | wc -l || echo "0")
          integration_specs=$(find spec/integration -name "*_spec.rb" 2>/dev/null | wc -l || echo "0")
          cassettes=$(find spec/vcr_cassettes -name "*.yml" 2>/dev/null | wc -l || echo "0")
          
          echo "üìà Statistics:"
          echo "   Total spec files: $total_specs"
          echo "   Tests using VCR: $vcr_specs"
          echo "   Integration tests: $integration_specs"  
          echo "   VCR cassettes: $cassettes"
          echo ""
          
          # Check Zero-Leak VCR setup
          if [ -f "spec/support/vcr_setup.rb" ]; then
            echo "üîí Zero-Leak VCR: ACTIVE"
          else
            echo "‚ö†Ô∏è  Zero-Leak VCR: NOT DETECTED"
          fi
          
      - name: Fail if issues found
        run: |
          issues_found=false
          
          if [ "$MISSING_CASSETTE" = "true" ]; then
            echo "‚ùå FAILURE: Missing VCR cassettes detected"
            echo ""
            echo "üîß Fix by recording cassettes locally:"
            echo "   VCR_RECORD=true bundle exec rspec"
            echo "   git add spec/vcr_cassettes/"
            echo "   git commit -m 'Add missing VCR cassettes'"
            issues_found=true
          fi
          
          if [ "$MALFORMED_CASSETTES" = "true" ]; then
            echo "‚ùå FAILURE: Malformed VCR cassettes detected"
            echo ""
            echo "üîß Fix by re-recording cassettes:"
            echo "   rm spec/vcr_cassettes/path/to/bad/cassette.yml"
            echo "   VCR_RECORD=true bundle exec rspec path/to/test"
            issues_found=true
          fi
          
          if [ "$VCR_ANTIPATTERNS" = "true" ]; then
            echo "‚ùå FAILURE: VCR anti-patterns detected"
            echo ""
            echo "üîß Fix by using Zero-Leak VCR patterns:"
            echo "   See AGENT_VCR_PATTERNS.md for correct usage"
            echo "   Replace VCR.use_cassette with 'vcr: true'"
            issues_found=true
          fi
          
          if [ "$UNHANDLED_REQUESTS" = "true" ]; then
            echo "‚ö†Ô∏è  WARNING: Unhandled VCR requests found"
            echo "   This may indicate tests making external calls without VCR"
            echo "   Review logs/vcr_unhandled_requests.log"
          fi
          
          if [ "$issues_found" = "true" ]; then
            echo ""
            echo "üí° Resources:"
            echo "   - Zero-Leak VCR Guide: ZERO_LEAK_VCR_GUIDE.md"
            echo "   - Agent Patterns: AGENT_VCR_PATTERNS.md"
            echo ""
            echo "üö® VCR validation failed! External API calls without cassettes"
            echo "   could result in unexpected API costs in CI/production."
            exit 1
          fi
          
          echo "‚úÖ VCR validation passed!"
          
  vcr-dry-run:
    name: VCR Dry Run Test
    runs-on: ubuntu-latest
    needs: vcr-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Ruby  
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          
      - name: Set up test environment
        run: |
          # Create test database
          RACK_ENV=test bundle exec rake db:create db:migrate
          
      - name: Run tests with VCR in CI mode
        env:
          CI: true
          RACK_ENV: test
        run: |
          echo "üß™ Running test suite with CI VCR mode..."
          echo "   This ensures all external calls go through VCR cassettes"
          echo "   and no external API calls are made during CI"
          
          # Run a subset of tests to validate VCR setup
          if ! bundle exec rspec spec/integration/ --format documentation --color; then
            echo ""
            echo "‚ùå Test failures detected!"
            echo "   This may indicate:"
            echo "   1. Missing VCR cassettes"
            echo "   2. Tests making external calls without VCR"
            echo "   3. Cassettes don't match actual requests"
            echo ""
            echo "üîß Fix locally:"
            echo "   VCR_RECORD=true bundle exec rspec spec/integration/"
            exit 1
          fi
          
          echo "‚úÖ VCR dry run passed - no external API calls detected!"
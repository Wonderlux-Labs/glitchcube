name: Test Suite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: RSpec Tests (Ruby ${{ matrix.ruby-version }})
    
    # Ensure the job fails when tests fail
    continue-on-error: false
    
    strategy:
      matrix:
        ruby-version: ['3.3']
      # Ensure all matrix jobs fail if any fail
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      RACK_ENV: test
      OPENROUTER_API_KEY: dummy-key-for-ci
      HOME_ASSISTANT_TOKEN: dummy-token-for-ci
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: Wait for PostgreSQL to be ready
      run: |
        # Install PostgreSQL client tools
        sudo apt-get update && sudo apt-get install -y postgresql-client
        # Wait for PostgreSQL to be ready
        for i in $(seq 1 10); do
          pg_isready -h localhost -p 5432 -U postgres && break
          echo "Waiting for PostgreSQL... ($i/10)"
          sleep 5
        done
        pg_isready -h localhost -p 5432 -U postgres || (echo "PostgreSQL not ready after multiple attempts." && exit 1)
      env:
        PGPASSWORD: postgres
    
    - name: Set up database
      run: |
        # Create database and enable PostGIS extensions
        createdb -h localhost -U postgres glitchcube_test
        psql -h localhost -U postgres -d glitchcube_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        psql -h localhost -U postgres -d glitchcube_test -c "CREATE EXTENSION IF NOT EXISTS postgis_topology;"
        
        # Run migrations instead of schema:load to avoid PostGIS adapter issues
        bundle exec rake db:migrate
      env:
        PGPASSWORD: postgres
        

    - name: Run RSpec tests
      run: |
        # Ensure we capture the exit code properly
        bundle exec rspec \
          --format progress \
          --format RspecJunitFormatter \
          --out tmp/rspec_results.xml \
          --format documentation || exit $?
      
name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: RSpec Tests (Ruby ${{ matrix.ruby-version }})
    
    strategy:
      matrix:
        ruby-version: ['3.3']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RACK_ENV: test
      MOCK_HOME_ASSISTANT: true
      OPENROUTER_API_KEY: test-api-key
      HOME_ASSISTANT_TOKEN: test-ha-token
      REDIS_URL: redis://localhost:6379/0
      DATABASE_URL: sqlite::memory:
      SESSION_SECRET: test_session_secret_for_github_actions_that_is_long_enough

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: Create data directories
      run: |
        mkdir -p data/test/{glitchcube,context_documents}
        mkdir -p spec/fixtures
    
    - name: Wait for Redis
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 1
        done
    
    - name: Run database setup
      run: |
        # No explicit database setup needed for SQLite memory database
        echo "Using in-memory SQLite for tests"
    
    - name: Run RSpec tests
      run: |
        bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec_results.xml
      
    - name: Generate coverage report
      run: |
        echo "Coverage report generated by SimpleCov"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ruby-${{ matrix.ruby-version }}
        path: |
          tmp/rspec_results.xml
          coverage/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚ùå Test Suite Failed
          
          The RSpec test suite has failed. Please check the details in the Actions tab and fix any failing tests before merging.
          
          ### Quick debugging tips:
          - Run tests locally: \`bundle exec rspec\`
          - Check for missing environment variables
          - Ensure Redis is running if testing background jobs
          - Verify all VCR cassettes are up to date
          
          View the full test output in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Comment PR with success
      if: github.event_name == 'pull_request' && success()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚úÖ Test Suite Passed
          
          All RSpec tests are passing! üéâ
          
          The code is ready for review and merge.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Integration test job for Docker setup
  docker-test:
    runs-on: ubuntu-latest
    name: Docker Integration Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t glitchcube:test .
    
    - name: Test Docker image health
      run: |
        # Start container in background
        docker run -d --name glitchcube-test \
          -e RACK_ENV=test \
          -e MOCK_HOME_ASSISTANT=true \
          -e OPENROUTER_API_KEY=test-key \
          -e SESSION_SECRET=test_secret_for_docker_that_is_long_enough \
          -p 4567:4567 \
          glitchcube:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:4567/health || exit 1
        
        # Test welcome endpoint  
        curl -f http://localhost:4567/ || exit 1
        
        # Clean up
        docker stop glitchcube-test
        docker rm glitchcube-test
    
    - name: Test multi-stage Docker build
      run: |
        docker build -f Dockerfile.multistage -t glitchcube:multistage-test .
        
        # Quick smoke test
        docker run --rm \
          -e RACK_ENV=test \
          -e MOCK_HOME_ASSISTANT=true \
          -e OPENROUTER_API_KEY=test-key \
          -e SESSION_SECRET=test_secret_multistage_long_enough \
          glitchcube:multistage-test \
          bundle exec ruby -e "puts 'Multi-stage build successful'"